class Aqua.Containers.Linked_List[G]
   inherit Aqua.Containers.Forward_Iterable[G]
              redefine First end
   
feature{Aqua.Containers.Linked_List_Iterator}

   First_Cell : detachable Aqua.Containers.Linkable[G]
   Last_Cell  : detachable Aqua.Containers.Linkable[G]
   
feature

   Is_Empty : Boolean
      do
         Result := First_Cell = Void
      ensure
         Result = (First_Cell = Void)
      end

   First : Linked_List_Iterator[G]
      do
         create Result
         Result.Make (Current)
      end
      
   First_Element : G
      require
         not Is_Empty
      do
         Result := First_Cell.Item
      end
      
   Last_Element : G
      require
         not Is_Empty
      do
         Result := Last_Cell.Item
      end
      
   Append (New_Item : G)
      do
         if Is_Empty then
            create First_Cell
            Last_Cell := First_Cell
            Last_Cell.Put (New_Item)
         else
            Last_Cell.Put_Next (New_Item)
            Last_Cell := Last_Cell.Next
         end
      ensure
         Appended_To_End: Last_Element = New_Item
      end
      
invariant
   Last_Cell_Definition: Last_Cell = Void or else Last_Cell.Next = Void
   Cells_Consistent: (First_Cell = Void) = (Last_Cell = Void)
end
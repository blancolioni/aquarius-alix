case-sensitive = false
top-level ::= adventure

line-comment = "--"
right-margin = 78

identifier         ::= regex "[A-Za-z][A-Za-z0-9_]*"
integer            ::= regex "[0-9]+"
string             ::= regex multiline """([~""]*("""")*)*"""
quoted-identifier  ::= regex "'[~']+'"

adventure ::= [ options ] < unit > start

options ::= 'options' < option >

option ::= id [ id | integer ] '.'

unit ::= default | object-default | location-default | actor-default |
	 messages | rule | synonyms | syntax | verb | location |
	 object | container | actor | event | directive

directive ::= '$' id [ ids ]

default ::= 'default' 'attributes' attributes

location-default ::= 'location' 'attributes' attributes

object-default ::= 'object' 'attributes' attributes

actor-default ::= 'actor' 'attributes' attributes

attributes ::= < attribute '.' >

attribute ::= id | 'not' id | id [ '-' ] integer |
              id string

synonyms ::= 'synonyms' < synonym >

synonym ::= id-list '=' id '.'

messages ::= 'messages' < message >

message ::= id ':' statements

syntax ::= 'syntax' < syntax-item >

syntax-item ::= id '=' < syntax-element > ( where-class-restrictions | '.')

where-class-restrictions ::= 'where' class-restrictions

syntax-element ::= id | '(' id ')' { indicator }

indicator ::= '*' | '!'

class-restrictions ::= < class-restriction / 'and' >

class-restriction ::= id 'isa' classes else-statements

else-statements ::= 'else' statements

classes ::= < class-identifier / 'or' >

class-identifier ::= 'object' | 'actor' | 'container' |
                     'integer' | 'string' | 
                     'container' 'object' |
                     'container' 'actor'


verb ::= verb-header verb-body verb-tail

verb-header ::= 'verb' id-list

verb-body ::= simple-verb-body  | < verb-alternative >

verb-alternative ::= 'when' id simple-verb-body

simple-verb-body ::= [ checks ] [ does ]

verb-tail ::= 'end' 'verb' [ id ] '.'

checks ::= 'check' ( statements | check-list )

check-list ::= < check / 'and' >

check ::= expression else-statements

does ::= 'does' [ qualifier ] statements

location ::= location-header location-body location-tail

location-header ::= 'location' id [ name ]

location-body ::= { location-body-part }

location-body-part ::= description | does | is attributes |
                       exit | verb

location-tail ::= 'end' 'location' [ id ] '.'

exit ::= 'exit' id-list 'to' id [ exit-body ] '.'

exit-body ::= [ checks ] [ does ] 'end' 'exit' | id

object ::= object-header object-body object-tail

object-header ::= 'object' id [ where ] { name } [ where ]

object-body ::= { object-body-part }

object-body-part ::= properties | description | article | mentioned |
                     is attributes | verb

object-tail ::= 'end' 'object' [ id ] '.'

is ::= 'is' | 'are' | 'has'

description ::= 'description' [ statements ]

article ::= 'article' [ statements ]

mentioned ::= 'mentioned' statements

name ::= 'name' ids

properties ::= 'container' container-body

container ::= container-header container-body container-tail

container-header ::= 'container' id

container-body ::= [ limits ] [ header ] [ empty ]

container-tail ::= 'end' 'container' [ id ] '.'

limits ::= 'limits' < limit >

limit ::= limit-attribute 'then' statements

limit-attribute ::= attribute | 'count' integer

header ::= 'header' statements

empty ::= 'else' statements

event ::= event-header statements event-tail

event-header ::= 'event' id

event-tail ::= 'end' 'event' [ id ] '.'


actor ::= actor-header actor-body actor-tail

actor-header ::= 'actor' id [ where ] { name } [ where ]

actor-tail ::= 'end' 'actor' [ id ] '.'

actor-body ::= { actor-body-part }

actor-body-part ::= properties | description | is attributes |
		    verb | script

script ::= 'script' integer-or-id '.' [ description ] < step >

step ::= 'step' [ step-modifiers ] statements

step-modifiers ::= 'after' integer | 'wait' 'until' expression

rule ::= 'when' expression '=>' statements

start ::= 'start' where '.' [ statements ]

statements ::= < statement >

statement ::= output-statement | special-statement | manipulation-statement |
	      event-statement | assignment-statement | actor-statement |
	      comparison-statement

output-statement ::= string |
		     'describe' what '.' |
		     'say' expression '.' |
		     'list' what '.'

special-statement ::= 
	'quit' '.' |
	'look' '.' |
	'save' '.' |
	'restore' '.' |
	'restart' '.' |
	'score' [ integer ] '.' |
	'visits' integer '.' |
	'system' string '.'

manipulation-statement ::= 'empty' what [ where ] '.' |
			   'locate' what where '.'

event-statement ::= 'cancel' id '.' |
		    'schedule' id [ where ] 'after' expression '.'

assignment-statement ::= 'make' what something '.' |
			 'increase' attribute-reference [ by-clause ] '.' |
			 'decrease' attribute-reference [ by-clause ] '.' |
			 'set' attribute-reference 'to' expression '.'

by-clause ::= 'by' expression

comparison-statement ::= if-statement | depending-statement

if-statement ::= 'if' expression 'then' statements 
		 { 'elsif' expression 'then' statements }
		 [ 'else' statements ]
		 'end' 'if' '.'

depending-statement ::= 'depending' 'on' primary depend-cases 'end'
			| 'depend' '.'

depend-cases ::= < depend-case >

depend-case ::= 'else' statements | right-hand-side ':' statements

actor-statement ::= 'use' 'script' integer-or-id [ for-actor ] '.'

for-actor ::= 'for' id

expression ::= < term / 'or' >

term ::= < factor / 'and' >

factor ::= primary [ right-hand-side ]

right-hand-side ::= [ 'not' ] ( where | relation | contains | between )
                  | binop primary
		  | is something

relation ::= relop primary

contains ::= 'contains' factor

between ::= 'between' factor 'and' factor

primary ::= [ '-' ] integer
	  | string
	  | what
	  | 'score'
	  | aggregate where
          | '(' expression ')'
          | attribute-reference
 	  | 'random' primary 'to' primary

aggregate ::= 'count'
	    | 'sum' 'of' id
	    | 'max' 'of' id

something ::= [ 'not' ] id

what ::= 'object' | 'location' | 'actor' | id

where ::= 'here' | 'nearby' | 'at' what | 'in' what

binop ::= '+' | '-' | '*' | '/'

relop ::= '<>' | '=' | '==' | '>=' | '<=' | '>' | '<'

qualifier ::= 'before' | 'after' | 'only'

ids ::= < id >

id-list ::= < id / ',' >

attribute-reference ::= id 'of' what

integer-or-id ::= integer | id

id ::=  identifier | quoted-identifier |
        'article' | 'message' | 'quit' | 'save' | 'restore' |
   	'restart' | 'wait' | 'between' | 'contains' | 'on' | 'in'


@!aquarius:actionscript
@declare Qualified_Name : constant String :=
@   /Top_Level_Interface_Declaration/Qualified_Identifier.Image;
@declare Package_Name : constant String := Qualified_Name & ".Client";
@declare Base_Name : constant String :=
@   /Top_Level_Interface_Declaration/Qualified_Identifier.Last.Image;
@declare Interface_Name : constant String := Base_Name & "_Interface";
@declare Client_Record_Name : constant String := Base_Name & "_Client_Interface";
@declare Interface_Class_Name : constant String := "Root_" & Interface_Name;
@Set_Output (Ada_Body_Name (Package_Name));
with Rose.Invocation;
with Rose.System_Calls;

package body [Package_Name] is

   function Create_Client
@for /Top_Level_Interface_Declaration/List_Of_Declarations loop
@   case Tree is
@      when Subprogram_Declaration =>
    [(if First_Loop then "(" else ";")][/Identifier]_Cap : Rose.Objects.Capability
@   end case;
@end loop;
    ) return [Interface_Name]
   is
   begin
      return new [Client_Record_Name]'
@for /Top_Level_Interface_Declaration/List_Of_Declarations loop
@   case Tree is
@      when Subprogram_Declaration =>
        [(if First_Loop then "(" else ",")][/Identifier]_Cap => [/Identifier]_Cap
@   end case;
@end loop;
        );
   end [Interface_Name];

@for /Top_Level_Interface_Declaration/List_Of_Declarations loop
@   case Tree is
@      when Subprogram_Declaration =>

   overriding [(if /Function_Declaration then "function" else "procedure")] [/Identifier]
     (Item : in out [Client_Record_Name]
@ if /Formal_Arguments then
@ for Formal_Argument of /Formal_Arguments loop
     ; [/Identifier] : [.Mode] [/Typeref.Ada_Name]
@ end loop;
@ end if;
     )
@ if /Function_Declaration then
     return [/Typeref.Ada_Name]
@ end if;
   is
      use Rose.Invocation;
      Params : Invocation_Record;
   begin
@ if /Formal_Arguments then
@    for Formal_Argument of /Formal_Arguments loop
@       if .Send_Word then
      Rose.System_Calls.Set_Data_Word (Params, [.Send_Word], [/Identifier]);
@       end if;
@ end loop;
@ end if;
      declare
         Ctrl : Control_Word renames Params.Input_Ctrl;
      begin
         Ctrl.Header := 0;
         Ctrl.Flags  := (others => False);
         Ctrl.Flags (Send) := True;
@if .Send_Words then
         Ctrl.Last_Data_Word := [.Send_Words];
@end if;
         Ctrl.Flags (Block) := True;
         Ctrl.Footer := 0;
      end;
      Params.Cap := Item.[/Identifier]_Cap;
      Rose.System_Calls.Invoke_Capability (Params);
@ if /Formal_Arguments then
@    for Formal_Argument of /Formal_Arguments loop
@       if .Recv_Word then
      Rose.System_Calls.Get_Data_Word (Params, [.Recv_Word], [/Identifier]);
@       end if;
@ end loop;
@ end if;
   end [/Identifier];
   
@   end case;
@end loop;

end [Package_Name];

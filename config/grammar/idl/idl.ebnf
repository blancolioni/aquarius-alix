top_level = compilation_unit
case_sensitive = false

identifier         ::= standard ada_identifier
numeric_literal    ::= standard ada_numeric_literal
character_literal  ::= standard ada_character_literal
string_literal     ::= standard ada_string_literal
delimiter          ::= delimiters "&()+,;|"
symbol             ::= standard ada_symbol
comment            ::= standard ada_comment

format list_of_declarations indented_child
format record_components indented_child

format ';' no_space_before no_space_after new_line_after
format '.' no_space_before no_space_after
format '(' space_before no_space_after
format ')' no_space_before space_after
format ',' no_space_before space_after
format ''' no_space_before no_space_after

compilation_unit ::= top_level_interface_declaration

top_level_interface_declaration ::=
   'interface' qualified_identifier [ ':' parent_interfaces ] 'is'
      list_of_declarations
   'end' qualified_identifier ';'

parent_interfaces ::= < qualified_identifier / ',' >

qualified_identifier ::= < identifier / '.' >

list_of_declarations ::= { declaration ';' }

declaration ::= subprogram_declaration | type_declaration | constant_declaration

constant_declaration ::= identifier ':' 'constant' [ typeref ] ':=' expression

expression ::= numeric_literal | identifier

subprogram_declaration ::= function_declaration | procedure_declaration

function_declaration ::= 'function' identifier [ formal_arguments ] 'return' typeref

procedure_declaration ::= 'procedure' identifier [ formal_arguments ]

type_declaration ::= 'type' identifier 'is' type_definition

type_definition ::= record_type_definition
                  | new_type_definition
                  
new_type_definition ::= 'new' qualified_identifier

record_type_definition ::=
   'record' record_components 'end' 'record'

record_components ::= < record_component ';' >

record_component ::= identifier ':' typeref

formal_arguments ::= '(' < formal_argument / ';' > ')'

formal_argument ::= identifier ':' [ argument_spec ] typeref

argument_spec ::= 'in' | inout | 'out'

inout ::= 'in' 'out'

typeref ::= interface_typeref
          | address_typeref
          | word_typeref
          | storage_typeref
          | standard_typeref

interface_typeref ::= 'interface' qualified_identifier
address_typeref ::= 'address'
storage_typeref ::= 'storage_count'
word_typeref ::= 'word' | 'word_32' | 'word_64'

standard_typeref ::= qualified_identifier

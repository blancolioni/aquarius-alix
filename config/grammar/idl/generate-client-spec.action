@!aquarius:actionscript
@declare Qualified_Name : constant String :=
@   /Top_Level_Interface_Declaration/Qualified_Identifier.Image;
@declare Package_Name : constant String := Qualified_Name & ".Client";
@declare Base_Name : constant String :=
@   /Top_Level_Interface_Declaration/Qualified_Identifier.Last.Image;
@declare Interface_Name : constant String := Base_Name & "_Interface";
@declare Client_Record_Name : constant String := Base_Name & "_Client_Interface";
@declare Interface_Class_Name : constant String := "Root_" & Interface_Name;
@declare Arg_Count : Natural := 0;
@Set_Output (Ada_Specification_Name (Package_Name));
@for Context of Top.Contexts loop
private with [Context];
@end loop;
with Rose.Objects;

package [Package_Name] is

   pragma Style_Checks (Off);
   
   function Create_Client
@Arg_Count := 0;
@for P of Top.Bases loop
    [(if Arg_Count = 0 then "(" else ";")][P.Base_Name] : not null access [P.Package_Name].[P.Interface_Class_Name]'Class
@   Arg_Count := Arg_Count + 1;
@end loop;
@for P of Top.Subprograms loop
    [(if Arg_Count = 0 then "(" else ";")][P/Identifier]_Cap : Rose.Objects.Capability
@   Arg_Count := Arg_Count + 1;
@end loop;
    ) return [Interface_Name];

private

   type [Client_Record_Name] is
     new [Interface_Class_Name] with
      record
@for P of Top.Bases loop
         [P.Base_Name] : [P.Package_Name].[P.Interface_Name];
@end loop;
@for P of Top.Subprograms loop
         [P/Identifier]_Cap : Rose.Objects.Capability;
@end loop;
      end record;
@for Base of Top.Bases loop
@   for P of Base.Subprograms loop
   overriding [(if P/Function_Declaration then "function" else "procedure")] [P/Identifier]
     (Item : in out [Client_Record_Name]
@        if P/Formal_Arguments then
@           for Formal_Argument of P/Formal_Arguments loop
     ; [/Identifier] : [.Mode] [/Typeref.Ada_Name]
@           end loop;
@        end if;
     )[(if /Function_Declaration then "" else ";")]
@ if /Function_Declaration then
     return [/Typeref.Ada_Name];
@ end if;
@   end loop;
@end loop;
@for P of Top.Subprograms loop
   overriding [(if P/Function_Declaration then "function" else "procedure")] [P/Identifier]
     (Item : in out [Client_Record_Name]
@ if P/Formal_Arguments then
@ for Formal_Argument of P/Formal_Arguments loop
     ; [/Identifier] : [.Mode] [/Typeref.Ada_Name]
@ end loop;
@ end if;
     )[(if /Function_Declaration then "" else ";")]
@ if /Function_Declaration then
     return [/Typeref.Ada_Name];
@ end if;
@end loop;

end [Package_Name];

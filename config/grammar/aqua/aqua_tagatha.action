before class_declaration do
   IO.put_line ("generating: " & tree.class.name)
   tree.begin_unit (tree.class.name)
end

after class_declaration do

   if not tree.class.deferred then
      tree.procedure (tree.class.name & "$new", 0, 0, 1);
      tree.alloc (tree.class.size);
      tree.return
   end if
   
   for feature in tree.class.features.list loop
      if feature.attribute then
         null
      else
         IO.put_line ("routine: " & feature.standard_name);
         tree.procedure
           (tree.class.name & "__" & feature.standard_name,
            feature.formal_arguments.list.length,
            feature.local.list.length,
            1, --  (if feature.function then 1 else 0),
            1)
         tree.return
      end if
   end loop

   tree.text_segment
   tree.label (tree.class.name & "$vt");
   for class in tree.class.ancestors.list loop
      tree.data (tree.class.name & "$vt");
      for feature in class.features.list loop
         if feature.attribute then
            null
         elsif feature.redefined then
            null
         elsif tree.class.features.table.get (feature.standard_name) then
            tree.data (tree.class.name & "__" & feature.standard_name);
         else
            tree.data (class.name & "__" & feature.standard_name);
         end if
      end loop;
   end loop;
   tree.code_segment
   tree.end_unit;
end


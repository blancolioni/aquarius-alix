before class_declaration do
   IO.put_line ("generating: " & tree.class.name)
   tree.begin_unit (tree.class.name)
   tree.strings := (list => new Array, table => new Map)
end;

after class_declaration/class_header do
   IO.put_line ("  - generating class header");
   parent.begin_routine(parent.class.name & "$new", 0, 0, 1);
   parent.push_external ("map", 1);
   parent.pop_register ("op");
   parent.native_operation ("allocate", 0, 0, "op");
   parent.push_register ("op");
   parent.pop_register ("agg");
   parent.push_register ("agg");
   parent.pop_register ("r0");
   parent.end_routine;
   
   for feature in parent.class.features.list loop
      if feature.attribute then
         parent.begin_routine(parent.class.name & "__" & feature.name & "$get", 1, 0, 1);
         
         parent.end_routine;
         parent.begin_routine(parent.class.name & "__" & feature.name & "$set", 2, 0, 0);
         parent.end_routine;
      end if;
   end loop;
end;

after class_declaration do
   tree.end_unit;
   tree.code_unit ("pdp32");
end;
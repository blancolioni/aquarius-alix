class Petal.Init.Top_Level_Procedure_Declaration
inherit
   Aqua.Text_IO
   
feature
   
   Checked_Procedure : Petal.Checks.Top_Level_Procedure_Declaration
   
   Before_Node
      local
         Proc_Converter    : System.Address_To_Object_Conversions[Petal.Checks.Top_Level_Procedure_Declaration]
         Arg_Converter     : System.Address_To_Object_Conversions[Petal.Entry_Table]
         Arg_Addr : System.Address;
         Context : Petal.Entry_Table

      do
          Put_Line ("generating init script")
          Context := Checked_Procedure.Argument_Context
          Arg_Addr := Arg_Converter.To_Address (Context)
          Set_Output ("init-script.ads")
          Put_Line ("--  generated by Aquarius/Petal")
          Put_Line ("with System.Storage_Elements;")
          New_Line
          Put_Line ("with Init.Commands;                    use Init.Commands;")
          New_Line
          Put_Line ("package Init.Script is")
          New_Line
          Put_Line ("   type Script_Type is")
          Put_Line ("     array (Positive range <>) of Init.Commands.Command_Record;")
          New_Line
          
          Write_Argument_Caps
          
          New_Line
          
          Write_Type_Support
          
          New_Line
          
          Checked_Procedure.String_Literals.Declare_Strings
          
          Write_Script
      
      end
   
   After_Node
   do
      Put_Line ("end Init.Script;")
      Set_Output ("")
      Put_Line ("done")
   end
   
feature{None}

   Write_Argument_Caps
      local
         Cap : Integer
         Context : Petal.Entry_Table
         List    : Aqua.Containers.Linked_List [Petal.Entry]
      do
         Context := Checked_Procedure.Argument_Context
         List := Context.Entry_List
         across List as Arg loop
            if Arg.Type.Name = "capability" then
               Cap := Cap + 1
               Set_Col (4)
               Put (Arg.Declared_Name)
               Set_Col (20)
               Put (": constant := ")
               Put (Cap.To_String)
               Put (";")
               New_Line
            end
         end
      end

   Write_Type_Support
      local
         Cap : Integer
         Next_Scratch_Register : Integer
      do
         Next_Scratch_Register := 16
         across Checked_Procedure.Declaration_Context.Entry_List as Item loop
            if Item.Type.Name = "page" then
               Set_Col (4)
               Put (Item.Declared_Name)
               Set_Col (20)
               Put_Line (": System.Storage_Elements.Storage_Array (1 .. 4096)")
               Set_Col (6)
               Put_Line ("with Alignment => 4096;")
            elsif Item.Type.Name = "capability" then
               Set_Col (4)
               Put (Item.Declared_Name)
               Set_Col (20)
               Put_Line (": constant Init_Register := " & Next_Scratch_Register.To_String & ";")
               Next_Scratch_Register := Next_Scratch_Register + 1
            end
         end
      end

   Write_Script
      local
         Index : Integer
         Stats : Petal.Statements
         Sts   : Aqua.Containers.Linked_List [Petal.Statement]
      do
         Stats := Checked_Procedure.Statements
         Sts   := Stats.Statements
         
         Put ("   Init_Script : constant Script_Type := (")
         across Sts as St loop
            across St.Init_Script_Lines as Line loop
               Index := Index + 1
               if Index > 1 then
                  Put (",")
               end
               New_Line
               Put ("      ")
               Put (Line)
            end
         end
         New_Line
         Put_Line ("     );")
         New_Line
      end
      
end 
before Compilation_Unit do
  new Top.Dependents;
  new Top.Config_Package_List;
  new Top.Config_Package_Map;
  new Top.Types;
  new Top.Type_List;
  new Top.File_List;
  new Top.File_Map;
end;

after Compilation_Unit do
   Report_State;
end;

after Package_Name do
  Top.Qualified_Name := Package_Name.Image;
end;

after Context_Clause/Qualified_identifier do
  Top.Dependents.Include (Qualified_Identifier.Image);
end;

after File_Declaration do
  Top.File_List.Include (Tree/Identifier.Image);
  if Tree/String_Literal then
     Tree.File_Name := Tree/String_Literal.String_Value;
  else
     Tree.File_Name := Tree/Identifier.Image.To_Lower & ".txt";
  end if;
  Top.File_Map.Set (Tree/Identifier.Image, Tree);
  Komnenos.Define (tree, tree/identifier, "declaration");
end;

after Type_Declaration/identifier do
  Top.Types.Set (identifier.Image, Type_Declaration);
  Top.Type_List.Include (identifier.Image);
  Type_Declaration.Type_Name := (id => Identifier.Image);
  Top.Current_Type_Declaration := Type_Declaration;
  Komnenos.Define (parent, child, "declaration");
end;

before Type_Declaration/Type_Definition do
   Type_Definition.Type_Declaration := Type_Declaration;
end;

before Type_Definition do
   Type_Definition.Type_Name := Top.Current_Type_Declaration.Type_Name;
end;

before Type_Definition/Record_Type do
   Record_Type.Type_Declaration := Type_Definition.Type_Declaration;
end;

before Record_Type do
   new Record_Type.Component_Map;
   Top.Current_Record := Record_Type;
end;

before Record_Field do
   Tree.Default_Value := null;
end;

after Record_Field/Identifier do
   Record_Field.Ada_Name := Identifier.Image;
   Record_Field.Config_Name := Identifier.Image.To_Lower;
end;

after Record_Field/String_Literal do
   Record_Field.Config_Name := String_Literal.String_Value;
end;

after Record_Component_Type/Named_Type do
   Record_Component_Type.Tree_Type := Named_Type;
end;

after Record_Component_Type/List_Type do
   Record_Component_Type.Tree_Type := List_Type;
end;

after Record_Field/value do
   Record_Field.Default_Value := value;
end;

after Record_Field/Record_Component_Type do
   Record_Field.Tree_Type := Record_Component_Type.Tree_Type;
end;

before Qualified_Identifier do
   Qualified_Identifier.Qualifier := null;
   Qualified_Identifier.Last_Identifier := null;
end;

after Qualified_Identifier do
--   if Tree.Qualifier then
--      Put_Line (Tree.Qualifier & "." & Tree.Name);
--   else
--      Put_line (Tree.Name);
--   end if;
end;

after Qualified_Identifier/identifier do
   Qualified_Identifier.Name := identifier.Image;
   if Qualified_Identifier.Last_Identifier then
      if Qualified_Identifier.Qualifier then
         Qualified_Identifier.Qualifier :=
           Qualified_Identifier.Qualifier & "." & Qualified_Identifier.Last_Identifier.Image;
      else
         Qualified_Identifier.Qualifier := Qualified_Identifier.Last_Identifier.Image;
      end if;      
   end if;
   Qualified_Identifier.Last_Identifier := identifier;
end;

after Named_Type/Qualified_Identifier
   or List_Type/Qualified_Identifier
do
   if Qualified_Identifier.Qualifier then
      if Top.Dependents.Contains (Qualified_Identifier.Qualifier) then
         Tree.Type_Name := (id => Qualified_Identifier.Image);
         if Top.Config_Package_Map.Contains (Qualified_Identifier.Image) then
            null;
         else
            Top.Config_Package_List.Include (Qualified_Identifier.Image);
            Top.Config_Package_Map.Set (Qualified_Identifier.Image, Qualified_Identifier);
         end if;
      elsif Top.Types.Contains (Qualified_Identifier.Qualifier) then
         Tree.Type_Name := (id => "String");
      else
         Tree.Type_Name := (id => "<unknown type>");
      end if;
   elsif Top.Types.Contains (Qualified_Identifier.Name) then
      Tree.Type_Name := (id => Qualified_Identifier.Name, rt => Qualified_Identifier.Name & "'Class");
   else
      Tree.Type_Name := (id => Qualified_Identifier.Name);
   end if;

   if not Tree.Type_Name.internal then
      Tree.Type_Name.internal := Tree.Type_Name.id;
   end if;
   
   if not Tree.Type_Name.rt then
      Tree.Type_Name.rt := Tree.Type_Name.id;
   end if;
   
end;

before Compilation_Unit do
  Top.Dependents := Create_Set;
  Top.Config_Package_List := Create_Set;
  Top.Config_Package_Map := Create_Map;
  Top.Types := Create_Map;
  Top.Type_List := Create_Set;
  Top.File_List := Create_Set;
  Top.File_Map  := Create_Map;
end;

after Package_Name do
  Top.Qualified_Name := Package_Name.Image;
end;

after Context_Clause/Qualified_identifier do
  Top.Dependents.Include (Qualified_Identifier.Image);
end;

after File_Declaration do
  Top.File_List.Include (Tree/Identifier.Image);
  if Tree/String_Literal then
     Tree.File_Name := Tree/String_Literal.String_Value;
  else
     Tree.File_Name := To_Lower (Tree/Identifier.Image) & ".txt";
  end if;
  Top.File_Map.Insert (Tree/Identifier.Image, Tree);
end;

after Type_Declaration/identifier do
  Top.Types.Insert (identifier.Image, Type_Declaration);
  Top.Type_List.Include (identifier.Image);
  Type_Declaration.Type_Name := Identifier.Image;
  Type_Declaration.Internal_Type_Name := Type_Declaration.Type_Name;
  Top.Current_Type_Declaration := Type_Declaration;
end;

before Type_Declaration/Type_Definition do
   Type_Definition.Type_Declaration := Type_Declaration;
end;

before Type_Definition do
   Type_Definition.Type_Name := Top.Current_Type_Declaration.Type_Name;
   Type_Definition.Internal_Type_Name := Top.Current_Type_Declaration.Internal_Type_Name;
end;

before Type_Definition/Record_Type do
   Record_Type.Type_Declaration := Type_Definition.Type_Declaration;
end;

before Record_Type do
   Record_Type.Component_Map := Create_Map;
   Top.Current_Record := Record_Type;
end;

before Record_Field do
   Tree.Default_Value := null;
end;

after Record_Field/Identifier do
   Record_Field.Ada_Name := Identifier.Image;
   Record_Field.Config_Name := To_Lower (Identifier.Image);
end;

after Record_Field/String_Literal do
   Record_Field.Config_Name := String_Literal.String_Value;
end;

after Record_Component_Type/Named_Type do
   Record_Component_Type.Tree_Type := Named_Type;
end;

after Record_Component_Type/List_Type do
   Record_Component_Type.Tree_Type := List_Type;
end;

after Record_Field/value do
   Record_Field.Default_Value := value;
end;

after Record_Field/Record_Component_Type do
   Record_Field.Tree_Type := Record_Component_Type.Tree_Type;
end;

before Qualified_Identifier do
   Qualified_Identifier.Qualifier := null;
   Qualified_Identifier.Last_Identifier := null;
end;

after Qualified_Identifier do
   null;
end;

after Qualified_Identifier/identifier do
   Qualified_Identifier.Name := identifier.Image;
   if Qualified_Identifier.Last_Identifier then
      if Qualified_Identifier.Qualifier then
         Qualified_Identifier.Qualifier :=
           Qualified_Identifier.Qualifier & "." & Qualified_Identifier.Last_Identifier.Image;
      else
         Qualified_Identifier.Qualifier := Qualified_Identifier.Last_Identifier.Image;
      end if;      
   end if;
   Qualified_Identifier.Last_Identifier := identifier;
end;

after Named_Type/Qualified_Identifier do
   Named_Type.Standard_Type := null;
   Named_Type.Class_Type := null;
     if Qualified_Identifier.Qualifier then
        if Top.Dependents.Contains (Qualified_Identifier.Qualifier) then
           Named_Type.Type_Name := Qualified_Identifier.Image;
           Named_Type.Internal_Type_Name := Named_Type.Type_Name;
           if Top.Config_Package_Map.Contains (Qualified_Identifier.Image) then
              null;
           else
              Top.Config_Package_List.Include (Qualified_Identifier.Image);
              Top.Config_Package_Map.Insert (Qualified_Identifier.Image, Qualified_Identifier);
           end if;
        elsif Top.Types.Contains (Qualified_Identifier.Qualifier) then
           Named_Type.Type_Name := "String";
        else
           Named_Type.Type_Name := "<unknown type>";
        end if;
        Named_Type.Return_Type_Name := Named_Type.Type_Name;
     elsif Top.Types.Contains (Qualified_Identifier.Name) then
        Named_Type.Type_Name := Qualified_Identifier.Name;
        Named_Type.Return_Type_Name := Qualified_Identifier.Name & "'Class";
        Named_Type.Class_Type := Named_Type.Type_Name;
     else
        Named_Type.Type_Name := Qualified_Identifier.Name;
        Named_Type.Return_Type_Name := Named_Type.Type_Name;
        Named_Type.Standard_Type := Named_Type.Type_Name;
     end if;
end;

after List_Type/Qualified_Identifier do
   Tree.Standard_Type := null;
   Tree.Class_Type := null;
     if Qualified_Identifier.Qualifier then
        if Top.Dependents.Contains (Qualified_Identifier.Qualifier) then
           Tree.Type_Name := Qualified_Identifier.Image;
           Tree.Internal_Type_Name := Tree.Type_Name;
           if Top.Config_Package_Map.Contains (Qualified_Identifier.Image) then
              null;
           else
              Top.Config_Package_List.Include (Qualified_Identifier.Image);
              Top.Config_Package_Map.Insert (Qualified_Identifier.Image, Qualified_Identifier);
           end if;
        elsif Top.Types.Contains (Qualified_Identifier.Qualifier) then
           Tree.Type_Name := "String";
        else
           Tree.Type_Name := "<unknown type>";
        end if;
     elsif Top.Types.Contains (Qualified_Identifier.Name) then
        Tree.Type_Name := Qualified_Identifier.Name & "'Class";
        Tree.Class_Type := Tree.Type_Name;
     else
        Tree.Type_Name := Qualified_Identifier.Name;
        Tree.Standard_Type := Tree.Type_Name;
     end if;
end;

top_level ::= compilation_unit

case_sensitive = false

identifier         ::= standard ada_identifier
numeric_literal    ::= standard ada_numeric_literal
character_literal  ::= standard ada_character_literal
string_literal     ::= standard ada_string_literal
delimiter          ::= delimiters "&()+,;|"
symbol             ::= standard ada_symbol

line_comment       = "--"

format context_clause new_line_after
format declarative_part indented_child
format sequence_of_statements indented_child
format exception_handler indented_child
format record_type_definition new_line_before indent_before outdent_after
format record_component_list indented_child
format formal_part soft_new_line
format actual_argument_list soft_new_line
format default_value_expression soft_new_line
format type_definition soft_new_line
format 'generic' new_line_after
format generic_formal_parameter_list indented_child
format interface_inheritance soft_new_line
format new_generic_package soft_new_line_before
format generic_actual_part soft_new_line_before
format boolean_operator soft_new_line
format relational_operator soft_new_line
format binary_adding_operator soft_new_line
format multiplying_operator soft_new_line
format array_type_definition soft_new_line

format 'return' soft_new_line space_after
format 'then' closing space_after space_before
format 'loop' closing space_after space_before
format 'is' closing space_after space_before

format ';' no_space_before no_space_after new_line_after
format '.' no_space_before no_space_after
format '(' space_before no_space_after
format ')' no_space_before space_after
format ',' no_space_before space_after
format ''' no_space_before no_space_after
format '=>' soft_new_line_after
format 'with' soft_new_line_after space_after space_before
format 'of' soft_new_line_before space_after space_before
format ':' space_after space_before

compilation_unit ::= context_clause library_item
                   
context_clause ::= { context_item }

library_item ::= [ 'private' ] library_unit_declaration
               | [ 'private' ] library_unit_renaming_declaration
               | library_unit_body
               
library_unit_declaration ::= subprogram_declaration 
                           | package_declaration 
                           | generic_declaration 
                           | generic_instantiation

library_unit_renaming_declaration ::= package_renaming_declaration 
                                    | generic_renaming_declaration
                                    | subprogram_renaming_declaration

library_unit_body ::= subprogram_body | package_body

subunit ::= 'separate' qualified_reference proper_body

context_item ::= with_clause | use_clause | use_type_clause | pragma_spec

with_clause ::= ['limited'] ['private'] 'with' < withed_unit_name : package_name / ',' > ';'

use_clause ::= 'use' < external_unit_name / ',' > ';'

renaming_declaration ::= 
      object_renaming_declaration
    | exception_renaming_declaration
    | package_renaming_declaration
    | subprogram_renaming_declaration
    | generic_renaming_declaration
    
object_renaming_declaration ::= 
    defining_identifier ':' [null_exclusion] subtype_mark 'renames' object_reference [aspect_specification] ';'
  | defining_identifier ':' access_definition 'renames' object_reference [ aspect_specification ] ';'
  
exception_renaming_declaration ::= defining_identifier ':' 'exception' 'renames' exception_name [ aspect_specification ] ';'

package_renaming_declaration ::= 'package' defining_program_unit_name 'renames' package_name [ aspect_specification ] ';'

subprogram_renaming_declaration ::= 
    [ overriding_indicator ] subprogram_specification 'renames' callable_entity_name [ aspect_specification ] ';'
    
generic_renaming_declaration ::= 
    'generic' 'package' defining_program_unit_name 'renames' generic_package_name [ aspect_specification ] ';'
  | 'generic' 'procedure' defining_program_unit_name 'renames' generic_procedure_name [ aspect_specification ] ';'
  | 'generic' 'function' defining_program_unit_name 'renames' generic_function_name [ aspect_specification ] ';'
  
qualified_reference ::= < identifier / '.' >

defining_qualified_reference ::= < identifier / '.' >

subprogram_declaration ::= [ overriding_indicator ] subprogram_specification [ aspect_specification ] ';'

abstract_subprogram_declaration ::= [ overriding_indicator ] subprogram_specification 'is' 'abstract' [ aspect_specification ] ';'

null_procedure_declaration ::= [ overriding_indicator ] procedure_specification 'is' 'null' [ aspect_specification ] ';'

expression_function_declaration ::= [ overriding_indicator ] function_specification 'is' expression_function_value [ aspect_specification ] ';'

expression_function_value ::= parenthesised_expression | aggregate

subprogram_specification ::= procedure_specification | function_specification

procedure_specification ::=
   'procedure' defining_qualified_reference parameter_profile   

function_specification ::= 'function' defining_designator parameter_and_result_profile

defining_designator ::= defining_operator_symbol | defining_qualified_reference

defining_operator_symbol ::= operator_symbol

parameter_profile ::= [ formal_part ]

parameter_and_result_profile ::= [ formal_part ] 'return' [ null_exclusion ] subtype_mark
                               | [ formal_part ] 'return' access_definition

formal_part ::= '(' < parameter_specification / ';' > ')'

parameter_specification ::= defining_identifier_list ':' [ 'aliased' ] [ mode ] [ null_exclusion ] subtype_mark [ ':=' default_expression ]
                          | defining_identifier_list ':' access_definition [ ':=' default_expression ]
                          
mode ::= 'in' | 'out' | 'in' 'out'
                          
aspect_specification ::= 'with' list_of_aspects

list_of_aspects ::= < aspect / ',' >

aspect ::= identifier [ '=>' expression ]

aspect_clause ::= attribute_definition_clause
                | enumeration_representation_clause
                | record_representation_clause
                | at_clause
                
overriding_indicator ::= ['not'] 'overriding'

subprogram_body ::= 
    [overriding_indicator]
    subprogram_specification
       [aspect_specification] 'is'
       declarative_part
    'begin'
        handled_sequence_of_statements
    'end' [matching_name] ';'

package_declaration ::= package_specification ';'

package_specification ::= 
    'package' defining_program_unit_name
        [ aspect_specification ] 'is'
      { basic_declarative_item }
   [ 'private'
      { basic_declarative_item } ]
    'end' [ matching_name ]
    
package_rename ::= 'package' defining_qualified_reference 'renames' qualified_reference ';'

matching_name ::= < identifier / '.' > | operator_symbol

generic_instantiation ::=
     'package' defining_qualified_reference 'is' new_generic_package ';'
   | 'procedure' defining_qualified_reference 'is'
       'new' generic_procedure_name [generic_actual_part] ';'
   | 'function' defining_designator 'is'
       'new' generic_function_name [generic_actual_part] ';'

new_generic_package ::= 'new' generic_package_name [generic_actual_part]

generic_actual_part ::= '(' < generic_association / ','> ')'

generic_association ::= static_expression
                      | identifier '=>' static_expression
                      | operator_symbol '=>' static_expression

operator_symbol ::= string_literal

package_body ::= 
    'package' 'body' defining_program_unit_name
        [aspect_specification] 'is'
       declarative_part
   ['begin'
        handled_sequence_of_statements]
    'end' matching_name ';'
    
    
generic_declaration ::= generic_subprogram_declaration 
                      | generic_package_declaration

generic_subprogram_declaration ::= 
     generic_formal_part subprogram_specification [aspect_specification] ';'

generic_package_declaration ::= 
     generic_formal_part  package_specification ';'

generic_formal_part ::= 'generic' generic_formal_parameter_list

generic_formal_parameter_list ::= { generic_formal_parameter_declaration }

generic_formal_parameter_declaration ::= 
      formal_object_declaration
    | formal_type_declaration
    | formal_subprogram_declaration
    | formal_package_declaration     
    
formal_object_declaration ::=
   defining_identifier_list ':' [ mode ] subtype_mark
         [ ':=' default_expression ] ';'

formal_type_declaration ::=
   'type' defining_identifier [discriminant_part] [ 'is' formal_type_definition ] ';'

formal_type_definition ::=
     formal_private_type_definition
   | formal_derived_type_definition
   | formal_discrete_type_definition
   | formal_signed_integer_type_definition
   | formal_modular_type_definition
   | formal_floating_point_definition
   | formal_ordinary_fixed_point_definition
   | formal_decimal_fixed_point_definition
   | formal_array_type_definition
   | formal_access_type_definition


formal_private_type_definition ::=
    [['abstract'] 'tagged'] ['limited'] 'private'

formal_derived_type_definition ::=
   ['abstract'] 'new' subtype_mark [ 'with' 'private' ]

formal_discrete_type_definition ::= '(' '<>' ')'

formal_signed_integer_type_definition ::= 'range' '<>'

formal_modular_type_definition ::= 'mod' '<>'

formal_floating_point_definition ::= 'digits' '<>'

formal_ordinary_fixed_point_definition ::= 'delta' '<>'

formal_decimal_fixed_point_definition ::= 'delta' '<>' 'digits' '<>'

formal_array_type_definition ::= array_type_definition

formal_access_type_definition ::= access_type_definition

formal_subprogram_declaration ::=
   'with' subprogram_specification [ 'is' subprogram_default ] ';'

formal_package_declaration ::=
   'with' 'package' defining_identifier 'is' 'new'
       generic_package_name formal_package_actual_part ';'

generic_package_name ::= package_name

formal_package_actual_part ::= '(' '<>' ')' | generic_actual_part

subprogram_default ::= default_name | '<>' | 'null'

default_name ::= subprogram_name

default_expression ::= expression

block ::=
      declarative_part
   'begin'
        handled_sequence_of_statements
   'end' [ block_name ]

declarative_part ::= { declarative_item }

representation_clause ::= attribute_definition_clause
                        | record_representation_clause
                        | enumeration_representation_clause
                        | at_clause
                        
use_type_clause ::= 'use' 'type' type_indication ';'

subtype_declaration ::= 'subtype' subtype_name 'is' type_indication ';'

type_declaration ::= type_header [type_discriminator]
                                 'is' type_qualifiers type_definition
                                        [ aspect_specification ]
                                         ';'

incomplete_type_declaration ::=
          'type' defining_identifier [type_discriminator] [ 'is' 'tagged' ] ';'

type_discriminator ::=
        '(' discriminant_list ')'

discriminant_list ::= identifier ':' type_indication [ ':=' static_expression ]
                    | '<>'

type_qualifiers ::= ['abstract'] ['tagged'] ['limited']

object_declaration ::=
   defining_identifier_list ':' [ 'aliased' ] [ 'constant' ] subtype_indication [ ':=' expression ] [ aspect_specification ] ';'
 | defining_identifier_list ':' [ 'aliased' ] [ 'constant' ] access_definition [ ':=' expression ]  [ aspect_specification ]';'
 | defining_identifier_list ':' [ 'aliased' ] [ 'constant' ] array_type_definition [ ':=' expression ]  [ aspect_specification ] ';'
 | single_task_declaration
 | single_protected_declaration
 
exception_declaration ::= defining_identifier_list ':' exception [ aspect_specification ] ';'

variable_type ::= type_indication [ ( default_value | renaming ) ]

exception ::= 'exception' [ renaming ]

default_value ::= ':=' default_value_expression
renaming ::= 'renames' object_reference

default_value_expression ::= expression

number_declaration ::=
     defining_identifier_list ':' 'constant' ':=' static_expression ';'

defining_identifier_list ::= < identifier / ',' >

defining_identifier ::= identifier

type_indication ::= ['aliased'] ['constant'] direct_type_indication

direct_type_indication ::= subtype_indication | access_definition | array_type_definition

type_constraint ::= ( '(' < implicitly_typed_range_constraint / ',' > ')' )
                  | ( ''' ( identifier | 'range' | 'access' | 'digits' ))
                  | ('range' bounded_range)

implicitly_typed_range_constraint ::= simple_expression [ '..' simple_expression ]

type_definition ::= derived_type_definition | record_type_definition |
                    array_type_definition | private_type_definition |
                    enumerated_type_definition | access_type_definition |
                    range_type_definition | function_type_definition |
                    modular_type_definition | floating_point_type_definition |
                    procedure_type_definition | interface_type_definition

range_type_definition ::= 'range' (bounded_range | '<>')
modular_type_definition ::= 'mod' static_expression
floating_point_type_definition ::= 'digits' numeric_literal

bounded_range ::= static_expression '..' static_expression

access_type_definition ::=
      'access' [ general_access_modifier ] subtype_mark

general_access_modifier ::= 'all' | 'constant'

function_type_definition ::= [null_exclusion] 'access' 'function' parameter_and_result_profile

procedure_type_definition ::= [null_exclusion] 'access' 'procedure' parameter_profile

enumerated_type_definition ::=
        '(' < enumerated_literal / ',' > ')'

enumerated_literal ::= identifier | character_literal

private_type_definition ::= 'private'

derived_type_definition ::= 'new' qualified_reference derived_type_constraint

derived_type_constraint ::= type_constraint
                          | { interface_inheritance }
                              [ 'with' ( record_type_definition | 'private' )]

interface_inheritance ::= 'and' qualified_reference

interface_type_definition ::=
         [ ('limited' | 'task' | 'protected' | 'synchronized') ] 'interface'
                { 'and' subtype_mark }

interface_list ::= subtype_mark { 'and' subtype_mark }

record_type_definition ::= 'record' record_component_list 'end' 'record'
                         | 'null' 'record'

record_component_list ::= { component_declaration ';' }
                          [ variant_record_element ]

component_declaration ::= defining_identifier_list ':' type_indication
                                      [ ':=' default_expression ]
                       | 'null'

variant_record_element ::=
    'case' identifier 'is' < variant_case > 'end' 'case' ';'

variant_case ::= 'when' variant_case_options '=>' record_component_list

variant_case_options ::= < variant_case_value / '|' >
                       | 'others'

variant_case_value ::= qualified_reference | numeric_literal | character_literal

array_type_definition ::=
        'array' '(' < array_bound / ',' > ')' 'of' type_indication

array_bound ::= explicitly_typed_array_bound
              | bounded_range

explicitly_typed_array_bound ::=
        type_name [ 'range' ( bounded_range | '<>' ) ]
      | type_name ''' 'range' [ dimension_index ]
      
dimension_index ::= '(' constant_expression ')'

task_declaration ::= task_type_declaration
                   | single_task_declaration
                   | task_body
                   
task_type_declaration ::=
   'task' 'type' defining_identifier [ known_discriminant_part ] [aspect_specification] 
       [ 'is' [ 'new' interface_list 'with' ] task_definition ] ';'
       
single_task_declaration ::=
   'task' defining_identifier [aspect_specification] 
       [ 'is' [ 'new' interface_list 'with' ] task_definition ] ';'
       
task_definition ::=
    { task_item }
    [ 'private' { task_item } ]
    'end' [identifier]
    
task_item ::= entry_declaration | aspect_clause

task_body ::=
    'task' 'body' defining_identifier [ aspect_specification ] 'is'
       declarative_part
    'begin'
       handled_sequence_of_statements
    'end' [identifier] ';'
    
protected_declaration ::= 
    single_protected_declaration
  | protected_type_specification
  | protected_body
  
protected_type_specification ::=
   'protected' 'type' defining_identifier [ known_discriminant_part ] [ aspect_specification ] 'is'
        [ 'new' interface_list 'with' ]
        protected_definition ';'
        
single_protected_declaration ::=
   'protected' defining_identifier [ aspect_specification ] 'is'
        [ 'new' interface_list 'with' ]
        protected_definition ';'
        
protected_definition ::=
   { protected_operation_declaration }
   [ 'private' { protected_element_declaration } ]
   'end' identifier
   
protected_operation_declaration ::=
    subprogram_declaration
  | entry_declaration
  | aspect_clause
  
protected_element_declaration ::= 
    protected_operation_declaration
  | component_declaration
  
protected_body ::= 
   'protected' 'body' defining_identifier [ aspect_specification ] 'is'
       { protected_operation_item }
   'end' identifier ';'
   
protected_operation_item ::=
    subprogram_declaration
  | subprogram_body
  | entry_body
  | aspect_clause

entry_declaration ::=
   [overriding_indicator]
   'entry' defining_identifier [ '(' discrete_subtype_indication ')' ] parameter_profile [ aspect_specification ] ';'

entry_body ::= 
   'entry' defining_identifier entry_body_formal_part entry_barrier 'is'
      declarative_part
   'begin'
      handled_sequence_of_statements
   'end' [identifier] ';'
   
entry_body_formal_part ::= [ '(' entry_index_specification ')' ] parameter_profile

entry_barrier ::= 'when' condition

entry_index_specification ::= 'for' defining_identifier 'in' discrete_subtype_indication

declarative_item ::= 
    basic_declarative_item | body

basic_declarative_item ::= 
    basic_declaration | aspect_clause | use_clause | use_type_clause | pragma_spec

basic_declaration ::= 
     type_declaration | subtype_declaration
   | object_declaration | number_declaration
   | subprogram_declaration | abstract_subprogram_declaration
   | null_procedure_declaration | expression_function_declaration
   | package_declaration | renaming_declaration
   | exception_declaration | generic_declaration
   | generic_instantiation
   
body ::= proper_body | body_stub

proper_body ::= 
    subprogram_body | package_body | task_body | protected_body
    
body_stub ::= subprogram_body_stub | package_body_stub | task_body_stub | protected_body_stub

subprogram_body_stub ::= 
   [overriding_indicator]
   subprogram_specification 'is' 'separate'
      [aspect_specification] ';'

package_body_stub ::= 
   'package' 'body' defining_identifier 'is' 'separate'
      [aspect_specification] ';'

task_body_stub ::= 
   'task' 'body' defining_identifier 'is' 'separate'
      [aspect_specification] ';'

protected_body_stub ::= 
   'protected' 'body' defining_identifier 'is' 'separate'
      [aspect_specification] ';'
      
handled_sequence_of_statements ::=
    sequence_of_statements
    [ 'exception' < exception_handler > ]

sequence_of_statements ::= < single_statement >

single_statement ::= [ label ] statement

label ::= '<<' identifier '>>'

statement ::= null_statement | procedure_call | assignment_statement |
              if_statement | return_statement | declare_statement |
              loop_statement | exit_statement | case_statement |
                  raise_statement | pragma_spec | delay_statement | goto_statement

null_statement ::= 'null' ';'

goto_statement ::= 'goto' identifier ';'

raise_statement ::= 'raise' [ qualified_reference ] [ exception_message ] ';'

delay_statement ::= 'delay' ['until'] expression ';'

exception_message ::= 'with' expression

procedure_call ::= object_reference ';'

assignment_statement ::=
   object_reference ':=' expression ';'

object_reference ::= direct_name { name_qualifier }

direct_name ::= identifier

name_qualifier ::= '.' expanded_name
                 | actual_argument_list
                 | attribute_reference
                 | '(' expression '..' expression ')'

expanded_name        ::= 'all' | identifier | operator_name
actual_argument_list ::= '(' < actual_argument / ','> ')'
                       | '(' conditional_expression ')'
                       | '(' case_expression ')'

operator_name ::= string_literal

attribute_reference ::= ''' ( identifier | 'access' | 'range' | 'digits'
                              | '(' expression ')'
                              | aggregate )

actual_argument ::= expression
                  | identifier '=>' expression

if_statement ::= 'if' expression 'then' sequence_of_statements
                 { 'elsif' expression 'then' sequence_of_statements }
                 [ 'else' sequence_of_statements ]
                 'end' 'if' ';'

case_statement ::= 'case' expression 'is'
                     case_list
                   'end' 'case' ';'

case_list ::= < 'when' case_option '=>'
                            sequence_of_statements >

case_option ::= case_option_list
              | 'others'

case_option_list ::=
     < (qualified_reference | numeric_literal | character_literal | bounded_range) / '|' >


return_statement ::= simple_return | extended_return

simple_return ::= 'return' [expression] ';'

extended_return ::= 'return' identifier ':' [ 'constant' ] type_indication [ ':=' expression ] [ 'do'
                        sequence_of_statements
                    'end' 'return' ] ';'

exit_statement ::= 'exit' [ identifier ] [ 'when' expression ] ';'

declare_statement ::=
   [ declare_block_name ':' ]
   [ 'declare'
     declarative_part ]
   'begin'
        handled_sequence_of_statements
   'end' [ identifier ] ';'

declare_block_name ::= identifier

loop_statement ::=
                 [ loop_name ]
                 [ loop_statement_header ]
                    'loop'
                        sequence_of_statements
                    'end' 'loop' [ identifier ] ';'

loop_statement_header ::=
         while_statement_header | for_statement_header

loop_name ::= identifier ':'

while_statement_header ::= 'while' expression

for_statement_header ::=
   'for' identifier 'in' [ 'reverse' ] for_loop_discrete_range
 | 'for' identifier 'of' [ 'reverse' ] object_reference

for_loop_discrete_range ::= object_reference [ for_loop_subrange ]
                          | bounded_range

for_loop_subrange ::= 'range' bounded_range
                    | ''' 'range'

static_expression ::= expression

expression ::=
    relation { boolean_operator relation }

relation ::=
        simple_expression [ (relational_operator simple_expression  |
                            ['not'] 'in' (explicit_range | subtype_mark)) ]

explicit_range ::= simple_expression '..' simple_expression

simple_expression ::=
    [ unary_adding_operator ] term { binary_adding_operator term }

term ::= factor { multiplying_operator factor }

factor ::= primary [ exponentation_operator primary ]
       | unary_primary_operator primary

primary ::= numeric_literal | string_literal : string |
            object_reference | 'null' |
            parenthesised_expression | aggregate |
            character_literal | allocator

boolean_operator ::=
        'and' | 'and' 'then' | 'or' | 'or' 'else' | 'xor'

relational_operator ::= '=' | '/=' | '<' | '<=' | '>' | '>='

binary_adding_operator ::= '+' | '-' | '&'

unary_adding_operator ::= '+' | '-'

unary_primary_operator ::= 'abs' | 'not'

multiplying_operator ::= '*' | '/' | 'mod' | 'rem'

exponentation_operator ::= '**'

allocator ::= 'new' (qualified_expression | subtype_indication)

subtype_indication ::= subtype_mark [ type_constraint ]

subtype_mark ::= object_reference

constraint ::= scalar_constraint | composite_constraint

scalar_constraint ::= range_constraint

composite_constraint ::= '(' < discrete_range_or_discriminant / ',' > ')'

discrete_range_or_discriminant ::=
        expression |
        subtype_mark constraint |
        range |
        < discriminant_selector_name / '|' > '=>' expression

discrete_range ::= discrete_subtype_indication | range

discrete_subtype_indication ::= subtype_indication

range ::= range_attribute_reference |
          simple_expression '..' simple_expression

range_attribute_reference ::= prefix ''' range_attribute_designator

range_constraint ::= 'range' range

range_attribute_designator ::= 'range' [ '(' static_expression ')' ]

discriminant_part ::=
   unknown_discriminant_part | known_discriminant_part

unknown_discriminant_part ::= '(' '<>' ')'

known_discriminant_part ::=
   '(' { discriminant_specification / ';' } ')'

discriminant_specification ::=
   defining_identifier_list ':' ( subtype_mark | access_definition )
      [ ':=' default_expression ]

access_definition ::= [ null_exclusion ] access_object

null_exclusion ::= 'not' 'null'

access_object ::= access_type_definition
                | function_type_definition
                | procedure_type_definition

prefix ::= name

qualified_expression ::=
   name [ ''' (aggregate | '(' expression ')') ]

discriminant_constraint ::=
   '(' < discriminant_association / ',' > ')'

discriminant_association ::=
   [ < discriminant_selector_name / '|' > '=>' ] expression

discriminant_selector_name ::= identifier

operator ::= ('*' | '/' | 'mod' | 'rem') |
             ('+' | '-') |
             ('>' | '<' | '<=' | '>=' | '/=' | '=') |
             (('and' [ 'then' ]) | ('or' [ 'else' ]) ) |
             ('&')

atomic_expression ::= object_reference | numeric_literal | string_literal |
                      character_literal | 'null' |
                      parenthesised_expression |
                      aggregate

parenthesised_expression ::= '(' expression ')'
                           | '(' conditional_expression ')'
                           | '(' case_expression ')'
                           | '(' loop_expression ')'

conditional_expression ::= 'if' condition 'then' expression { 'elsif' condition 'then' expression } 'else' expression

condition ::= expression

case_expression ::= 'case' expression 'is' < case_expression_alternative / ',' >

case_expression_alternative ::= 'when' case_option '=>' expression

loop_expression ::= 'for' 'some' identifier 'of' primary '=>' expression
                  | 'for' 'all' identifier 'of' primary '=>' expression
                  
aggregate ::=
    '(' object_reference 'with' 'null' 'record' ')'
  | '(' object_reference 'with' < selector_expression / ',' > ')'
  | '(' selector '=>' expression ')'
  | '(' selector '=>' '<>' ')'
  | '(' selector_expression ',' < selector_expression / ',' > ')'

selector_expression ::= selector '=>' expression
                      | selector '=>' '<>'
                      | expression

object_reference_with ::=
        object_reference 'with'

selector ::= list_of_selector_items | 'others'

list_of_selector_items ::= < selector_item [ '..' selector_item] / '|' >

selector_item ::= constant_expression

constant_expression ::= expression

exception_handler ::=
     'when' identifier ':' qualified_reference '=>' sequence_of_statements
   | 'when' qualified_reference '=>' sequence_of_statements
   | 'when' identifier ':' 'others' '=>' sequence_of_statements
   | 'when' 'others' '=>' sequence_of_statements

pragma_spec ::=
   'pragma' identifier [ '(' pragma_arg_list ')' ] ';'

pragma_arg_list ::= < pragma_arg / ',' >

pragma_arg ::= expression
             | identifier '=>' expression

attribute_definition_clause ::=
        'for' local_name ''' attribute_designator 'use' expression ';'

record_representation_clause ::=
   'for' local_name 'use' (record_representation | expression) ';'

enumeration_representation_clause ::=
   'for' local_name 'use' enumeration_aggregate ';'

at_clause ::= 'for' direct_name 'use' expression ';'

enumeration_aggregate ::= aggregate

local_name ::= identifier

attribute_designator ::= identifier [ '(' static_expression ')' ] |
                        'access' | 'delta' | 'digits'

record_representation ::=
   'record' [ mod_clause ]
       { component_clause }
   'end' 'record'

mod_clause ::= 'at' 'mod' static_expression ';'

component_clause ::=
        component_local_name 'at' position 'range' first_bit '..' last_bit ';'

component_local_name ::= name

position ::= static_expression

first_bit ::= static_simple_expression

last_bit ::= static_simple_expression

static_simple_expression ::= simple_expression

type_header ::= 'type' defining_type_name

defining_type_name ::= identifier

procedure_name ::= qualified_reference

function_name ::= qualified_reference

package_name ::= qualified_reference

subprogram_name ::= qualified_reference | operator_symbol

external_unit_name ::= qualified_reference
withed_unit_name ::= < identifier / '.' >

subtype_name ::= identifier

type_name ::= name

block_name ::= name | operator_symbol

defining_program_unit_name ::= defining_qualified_reference : function_name

generic_procedure_name ::= name
generic_function_name  ::= name

exception_name ::= name

object_name ::= name

callable_entity_name ::= name

name ::= < identifier / '.' >

function Type_Signature_Key (Specification) is
   Signature := Specification.Signature;
   Return_Type := Specification.Return_Type;
   Result    := "";
begin
   for Argument in Signature loop
      if Result /= "" then
         Result := Result & ",";
      end if;
      Result := Result & Argument.Name & "--" & Argument.Mode & "--" & Argument.Type_Name;
   end loop;
   if Return_Type then
      Result := Result & ";return--" & Return_Type.Type_Name;
   end if;
   return "sig" & Result;
end Type_Signature_Key;

function New_Named_Object(table, name, standard_name, object_class) is
begin
   table.set(standard_name, (name => name, standard_name => standard_name, class => object_class));
   return table.get (name);
end New_Named_Object;
	  
function New_Type(table, name, standard_name, object_type) is
   Result := New_Named_Object (table, name, standard_name, "type");
begin
   Result.type := object_type;
   return Result;
end New_Type;

before Compilation_Unit do
--   IO.Put_Line ("Ada: defining subprogram names");
   top.universal_integer := (universal => 1);
   top.universal_integer.set ("type", (type_class => "integral"));
   top.universal_integer.set ("name", "an integer type");
   
   --  IO.put_line ("Universal-integer: " & top.universal_integer.image)
   
   top.symbol_table := new Map;
   top.standard_integer := New_Type (top.symbol_table, "Integer", "integer", (type_class => "integral"));
   top.standard_natural := New_Type (top.symbol_table, "Natural", "natural", (subtype_of => top.standard_integer, range => (low => 0)));
   top.standard_positive := New_Type (top.symbol_table, "Positive", "positive", (subtype_of => top.standard_integer, range => (low => 1)));
   top.symbol_table.float := (name => "Float", standard_name => "float", class => "type", type => "float");
   top.symbol_table.character := (name => "Character", standard_name => "character", class => "type", type => "enumeration", literals => new Array);
   top.symbol_table.boolean := (name => "Boolean", standard_name => "boolean", class => "type", type => "enumeration", literals => (false => 0, true => 1));
   top.symbol_table.false := (name => "False", standard_name => "false", class => "function", formals => new Array, return_type => top.symbol_table.boolean, enumeration_literal => 1, literal_value => 0);
   top.symbol_table.true := (name => "True", standard_name => "true", class => "function", formals => new Array, return_type => top.symbol_table.boolean, enumeration_literal => 1, literal_value => 0);   
   
   top.string_object := New_Type (top.symbol_table, "String", "string", (type_class => "array", range_type => top.symbol_table.positive, component_type => top.symbol_table.character));
   
end;

after Compilation_Unit do
--   IO.Put_Line ("Ada: finished defining subprogram names");
--   Aqua.Report_State;
end;


before procedure_body/procedure_specification 
    or function_body/function_specification
do
   child.body := 1;
end;

after procedure_body/procedure_specification do
   parent.signature := (name => child.name, arguments => child.signature, return_type => null);
   parent.defined_entity := 
      Komnenos.Define (parent, child.name, "procedure-declaration");
   parent|symbol_table.set (child.name, (class => "procedure", entity => parent.defined_entity, signature => parent.signature));
   parent^subprogram_declaration.defined_entity := parent.defined_entity;
end;

after function_body/function_specification do
   parent.signature := (name => child.name, arguments => child.signature, return_type => child.return_type);
   parent.defined_entity := 
      Komnenos.Define (parent, child.name, "function-declaration");
   parent|symbol_table.set (child.name, (class => "function", entity => parent.defined_entity, signature => parent.signature));
   parent^subprogram_declaration.defined_entity := parent.defined_entity;
end;

before function_specification or procedure_specification 
    or function_type_definition or procedure_type_definition 
do
   tree.signature := new Array;
end;

after procedure_specification/defining_qualified_reference 
   or function_specification/defining_qualified_reference
do
   parent.name := child.name;
end;

after function_specification/string_literal do
   parent.name := child.text;
end;

before function_specification/formal_argument_spec
   or procedure_specification/formal_argument_spec
   or function_type_definition/formal_argument_spec
   or procedure_type_definition/formal_argument_spec
do
   child.signature := parent.signature;
end;

after function_specification or procedure_specification do
   tree.signature_key := type_signature_key (tree);
   --  IO.Put_Line (tree.name & ": " & tree.signature_key);
end;

after package_spec/defining_qualified_reference do
   parent^subprogram_declaration.defined_entity :=
      Komnenos.Define (parent, defining_qualified_reference.concatenated_image, "package-declaration");
end;

after formal_argument_spec/formal_argument do
   for child_signature in child.signature loop
      parent.signature.append (child_signature);
   end loop;
end;

before formal_argument do
   tree.signature := new Array;
end;

after formal_argument/formal_argument_type do
   for name in parent.object_names loop
      parent|symbol_table.set
     	  (name.text, (class => "object", formal_argument => 1,
		               type => child.formal.type, name => name.text, declaration => name,
					   mode => child.formal.mode, not_null => child.formal.not_null));
   end loop;
end;

after formal_argument/defining_identifier_list do
   for name in child.defined_names loop
      parent.signature.append ((name => name));
   end loop;
   parent.object_names := child.defined_names;
end;

before formal_argument_type do
   tree.formal := (mode => "in");
end;

after formal_argument_type do
end;

after formal_argument_type/null_exclusion do
   parent.formal.not_null := 1;
end;

after formal_argument_type/mode do
   parent.formal.mode := child.concatenated_image;
end;

after formal_argument_type/subtype_mark do
   parent.formal.type := child.type;
end;

before defining_qualified_reference do
   tree.Qualifier := null;
   tree.Last_Identifier := null;
   tree.Last_Child := null;
end;

after defining_qualified_reference/identifier do
   if parent.last_child then
      parent.Last_Child.last := 0;
   end if;
   
   child.last := 1;
   parent.Last_Child := child;
   parent.Name := identifier.text;
   if parent.Last_Identifier then
      if parent.Qualifier then
         parent.Qualifier :=
           parent.Qualifier & "." & parent.Last_Identifier.Image;
      else
         parent.Qualifier := parent.Last_Identifier.Image;
      end if;      
      identifier.full_name := parent.qualifier & "." & identifier.text;
   else
      identifier.full_name := identifier.text;
   end if;
   parent.Last_Identifier := identifier;

end;

before block do
   tree.symbol_table := (table => new Map, parent => tree|symbol_table);
end;

after block do
end;

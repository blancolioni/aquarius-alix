with Subprograms;

before Compilation_Unit do
--   IO.Put_Line ("Ada: defining subprogram names");
end;

after Compilation_Unit do
--   Aqua.Report_State;
end;

after procedure_body/procedure_specification do
   Komnenos.Define (parent, child.name, "procedure-declaration");
end;

after function_body/function_specification do
   Komnenos.Define (parent, child.name, "function-declaration");
end;

after procedure_specification/defining_qualified_reference 
   or function_specification/defining_qualified_reference
do
   parent.name := child.name;
end;

after function_specification/string_literal do
   parent.name := child.text;
end;

after package_spec/defining_qualified_reference do
   Komnenos.Define (parent, defining_qualified_reference.image, "package-declaration");
end;

before formal_argument_spec do
   tree.signature := new Array;
end;

after formal_argument_spec/formal_argument do
   for child_signature in child.signature loop
      parent.signature.append (child.signature);
   end loop;
end;

before formal_argument do
   tree.signature := new Array;
end;

after formal_argument/defining_identifier_list do
   for name in child.defined_names loop
      tree.signature.append ((name => name));
   end loop;
end;

before formal_argument_type do
   formal_argument_type.type := (mode => "in");
end;

after formal_argument_type do
end;

after formal_argument_type/null_exclusion do
   parent.type.not_null := 1;
end;

after formal_argument_type/mode do
   parent.type.mode := child.image;
end;

after formal_argument_type/subtype_mark do
   parent.type.type := child.type;
end;

before defining_qualified_reference do
   tree.Qualifier := null;
   tree.Last_Identifier := null;
   tree.Last_Child := null;
end;

after defining_qualified_reference/identifier do
   if parent.last_child then
      parent.Last_Child.last := 0;
   end if;
   
   child.last := 1;
   parent.Last_Child := child;
   parent.Name := identifier.Image;
   if parent.Last_Identifier then
      if parent.Qualifier then
         parent.Qualifier :=
           parent.Qualifier & "." & parent.Last_Identifier.Image;
      else
         parent.Qualifier := parent.Last_Identifier.Image;
      end if;      
      identifier.full_name := parent.qualifier & "." & identifier.text;
   else
      identifier.full_name := identifier.text;
   end if;
   parent.Last_Identifier := identifier;

end;

before defining_identifier_list do
   tree.defined_names := new Array;
end;

after defining_identifier_list/identifier do
   parent.defined_names.append (identifier);
end;

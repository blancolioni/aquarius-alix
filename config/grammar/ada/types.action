function Base_Type (of_type) is
begin
   if of_type.type.subtype_of then
      return Base_type (of_type.type.subtype_of);
   else
      return of_type;
   end if;
end Base_Type;

function Conforms (type_1, type_2) is
   base_type_1 := Base_Type (type_1);
   base_type_2 := Base_Type (type_2);
begin
   if base_type_1 = base_type_2 then
      return 1;
   elsif type_1.universal then
      if type_1.type.type_class = base_type_2.type.type_class then
	     return 1;
      else
	     return 0;
      end if;
   elsif type_2.universal then
      if base_type_1.type.type_class = type_2.type.type_class then
	     return 1;
      else
	     return 0;
      end if;
   else
      return 0;
   end if;
end Conforms;

function Find_Object (Table, name) is
begin
   if Table.get (name) then
      return Table.get (name);
   elsif Table.parent then
      return find_Object (Table.parent, name);
   else
      return (error => "undefined: " & name);
   end if;
end Find_Object;

function Type_Error (tree, expected, found) is
begin
   if expected.length = 0 then
      tree.error ("no expected types");
   elsif expected.length = 1 then
      if found /= 0 then
	     tree.error ("expected " & expected.get (1).name & " but found " & found.name);
      else
	     tree.error ("expected " & expected.get (1).name);
	  end if;
   elsif found then
      tree.error ("no interpretation of " & tree.concatenated_image & " matches type " & found.name);
   else
      tree.error ("type error");
   end if;
end Type_Error;

function Check_Expected_Types(tree, expected, found) is
   OK := 0;
begin   
   if expected then
      tree.found_types := [];
      for possible in expected loop
	     OK := Conforms (found, possible);
	     if OK then
		    tree.found_types.append (possible)
		 end if;
	  end loop;

	  if tree.found_types.length = 0 then
	     Type_Error (tree, expected, found);
	  end if;
   end if;
end Check_Expected_Types;


top_level ::= program_unit
case_sensitive = false

identifier         ::= standard ada_identifier
numeric_literal    ::= standard ada_numeric_literal
character_literal  ::= standard ada_character_literal
string_literal     ::= standard ada_string_literal
delimiter          ::= delimiters "&()+,;|"
symbol             ::= standard ada_symbol

line_comment       = "--"

format ';' no_space_before new_line_after

format list_of_declarations indented_child
format list_of_definitions indented_child
format sequence_of_statements indented_child

program_unit ::= { context_clause } subprogram ';'

context_clause ::= 'with' package_reference ';'
                 | 'use' package_reference ';'

package_reference ::= < identifier / '.' >

subprogram ::= procedure_declaration
             | package_declaration

package_declaration ::= 'package' defining_package_name [ export_list ] 'is'
                            list_of_definitions
                        'end' matching_end_identifier : function_name

export_list ::= 'export' list_of_identifiers

list_of_identifiers ::= < identifier / ',' >

defining_package_name ::= identifier

list_of_definitions ::= { definition ';' }

list_of_declarations ::= { declaration ';' }

definition ::= variable_declaration | type_declaration | procedure_declaration

formal_argument_list ::= '(' < formal_argument / ';' > ')'

formal_argument ::= defining_identifier_list ':' named_type

procedure_declaration ::= 'procedure' identifier : function_name
                                [ formal_argument_list ]
                          'is'
                                block
                          'end' matching_end_identifier : function_name

block ::= list_of_declarations 'begin' sequence_of_statements

declaration ::= variable_declaration
              | procedure_declaration
              | type_declaration

variable_declaration ::= defining_identifier_list ':' named_type

defining_identifier_list ::= < identifier : variable_name / ',' >

type_declaration ::= 'type' identifier : type_name 'is' type_definition

type_definition ::= named_type
                  | access_type
                  | record_type

named_type ::= qualified_identifier : type_name

access_type ::= 'access' named_type

record_type ::= 'record' record_component_list 'end' 'record'
              | 'null' 'record'

record_component_list ::= < component_definition ';' >

component_definition ::= defining_identifier_list ':' named_type

sequence_of_statements ::= { [ label ] statement ';' }

label ::= '<<' identifier '>>'

statement ::= null_statement
            | procedure_call_statement
            | assignment_statement
            | if_statement
            | until_statement
            | goto_statement

null_statement ::= 'null'

assignment_statement ::= name ':=' expression

procedure_call_statement ::= name

name ::= direct_name { name_qualifier }

direct_name ::= identifier

name_qualifier ::= component_name        when record
                 | expanded_name         when package
                 | actual_argument_list  when procedure

component_name       ::= '.' ('all' when access | identifier)
expanded_name        ::= '.' (identifier | operator_name)
actual_argument_list ::= '(' < expression / ','> ')'

operator_name ::= string_literal

if_statement ::= 'if' expression 'then' sequence_of_statements
                 { 'elsif' expression 'then' sequence_of_statements }
                 [ 'else' sequence_of_statements ]
                 'end' 'if'

until_statement ::= 'until' expression 'loop' sequence_of_statements
                    'end' 'loop'

goto_statement ::= 'goto' identifier

expression ::= relation [ boolean_operator relation ]

boolean_operator ::= 'and' [ 'then' ]
                   | 'or' ['else']
                   | 'xor'

relation ::=
     simple_expression [relational_operator simple_expression]

relational_operator ::= '=' | '/=' | '<' | '<=' | '>' | '>='

simple_expression ::= [unary_adding_operator] term {binary_adding_operator term}

unary_adding_operator ::= '-' | '+'

binary_adding_operator ::= '+' | '-' | '&'

term ::= factor {multiplying_operator factor}

multiplying_operator ::= '*' | '/' | 'mod' | 'rem'

factor ::= primary ['**' primary] | 'abs' primary | 'not' primary

primary ::= numeric_literal
          | character_literal
          | string_literal : string
          | name
          | '(' expression ')'


qualified_identifier ::= < identifier / '.' >

matching_end_identifier ::= < identifier / '.' >

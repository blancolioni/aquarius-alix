top_level ::= package_declaration

case_sensitive = false

identifier         ::= ![\l_]\w*!
numeric_literal    ::= ![0-9]+!
character_literal  ::= !'[.]'!
string_literal     ::= !\x22[^\x22]*\x22!

line_comment = "--"

format record_components indented_child
format file_entries indented_child

format ';' no_space_before no_space_after new_line_after
format '.' no_space_before no_space_after
format '(' space_before no_space_after
format ')' no_space_before space_after
format ''' no_space_before no_space_after
format 'is' new_line_after

package_declaration ::= 'package' package_name 'is' list_of_declarations 'end' matching_package_name ';'

package_name ::= < identifier / '.' >

matching_package_name ::= package_name

list_of_declarations ::= { declaration ';' }

declaration ::= representation_declaration | file_declaration

representation_declaration ::= 'for' parameter [ ''' attribute ] 'use' constant_expression

parameter ::= identifier | 'access'
attribute ::= identifier

constant_expression ::= identifier | numeric_literal | character_literal | string_literal

expression ::= primary_expression

primary_expression ::= named_reference | member_expression | numeric_literal | character_literal | string_literal

named_reference ::= identifier

member_expression ::= record_reference < '.' identifier >

record_reference ::= identifier

file_declaration ::= 'file' file_name 'is' file_entries 'end' matching_file_name

file_entries ::= < file_entry ';' >

file_name ::= identifier

matching_file_name ::= identifier

file_entry ::= file_entry_name [ location ] ':' record_type 'end' matching_file_entry_name

file_entry_name ::= identifier

matching_file_entry_name ::= identifier

location ::= 'at' expression

record_type ::= 'record' [ array_size ] record_components

record_components ::= { record_component ';' }

record_component ::= component_name ':' component_type [ required_value ]

component_name ::= identifier

component_type ::= [ type_count ] named_type | access_type

type_count ::= numeric_literal '*'

named_type ::= identifier [ '/' numeric_literal ]

access_type ::=  'access' identifier [ from_clause ] [ base_clause ]

from_clause ::= 'from' access_offset ',' access_length

base_clause ::= 'base' base_offset

base_offset   ::= < identifier / '.' >

access_offset ::= identifier

access_length ::= identifier

array_size ::= '(' expression ')'

required_value ::= '=' expression

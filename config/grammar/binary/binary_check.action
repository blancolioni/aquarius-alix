before top_level do
   top.files := new Array;
end;

after top_level do
   aqua.report_state;
end;

after package_declaration/package_name do
   top.package_name := child.image;
   top.package_file := top.package_name.replace(".", "-").to_lower;
end;

after primary_expression/named_reference
   or primary_expression/member_expression
do
   parent.is_constant := 0;
end;

after primary_expression/numeric_literal
   or primary_expression/character_literal
   or primary_expression/string_literal
do
   parent.is_constant := 1;
end;

after expression/primary_expression do
   parent.is_constant := child.is_constant;
end;

after expression do
   tree.value := tree.image;
end;

after file_declaration/file_name do
   tree.file_name := file_name.image;
   tree.entries := new Array;
   top.files.append ((name => child.image, entries => tree.entries));
end;

after file_entry/file_entry_name do
   parent.entry := new Map;
   parent.layout := new Array;
   parent^file_declaration.entries.append
     ((name => child.image, declaration => parent));
end;

after location/expression do
   location.value := expression.value;
   if not expression.is_constant then
      location.value := "File." & location.value;
   end if;
end;

after file_entry/location do
   parent.location := location.value;
end;

after array_size/expression do
   parent.array_size := expression.value;
end;

after record_type/array_size do 
   parent.array_size := child.array_size;
end;

after file_entry/record_type do
   if child.array_size then
      parent.array_size := child.array_size;
   end if;
end;

before component_type do
   tree.component_size := 4;
end;

after named_type/identifier do
   parent.type := identifier.text;
   parent.component_size := 4;
end;

after named_type/numeric_literal do
   named_type.component_size := numeric_literal.text.to_integer;
end;

after component_type/named_type do
   parent.type := named_type.type;
   parent.component_size := named_type.component_size;
end;

after access_type/from_clause do
   parent.access_offset := from_clause/access_offset.image;
   parent.access_length := from_clause/access_length.image;
end;

after access_type/base_clause do
   parent.access_base := child/base_offset.image;
end;

after component_type/access_Type do
   parent.type := access_type/identifier.image;
   parent.access_type := 1;
   parent.access_offset := child.access_offset;
   parent.access_length := child.access_length;
   parent.access_base   := child.access_base;
end;

after record_component/component_name do
   parent.component_name := child.image;
end;

after record_component/component_type do
   parent.component_type := child.type;
   parent.component_access := child.access_type;
   if child.access_offset then
      parent.offset_and_length := (offset => child.access_offset, length => child.access_length);
   end if;
   parent.access_base := child.access_base;
   parent.component_size := child.component_size;
end;

after record_component/array_size do
   parent.array_size := child.array_size;
end;

after record_component/required_value do
   parent.required_value := child.image;
end;

after record_component do
   --  io.put_line (record_component/component_name.image);
   tree.component :=
      (name   => tree.component_name,
       type   => tree.component_type,
       access => tree.component_access,
       offset => tree.offset_and_length,
       base   => tree.access_base,
       array_size => tree.array_size,
       size => tree.component_size,
       required_value => tree.required_value);
   if tree.component.offset then
      if tree.component.type.to_lower = "string" then
         tree.component.type_name := "access String";
         tree.component.return_type_name := "String";
         tree.component.converter := "Item." & tree.component.name & ".all";
      else
         tree.component.type_name := "Storage_Access";
         tree.component.return_type_name := "System.Storage_Elements.Storage_Array";
         tree.component.converter := "Item." & tree.component.name & ".all";
      end if;
   elsif tree.component_access then
      tree.component.type_name := "access String";
      tree.component.return_type_name := "String";
      tree.component.converter := "Item." & tree.component.name & ".all";
   elsif tree.component.type.to_lower = "word" then
      tree.component.type_name := "WL.Binary_IO.Word_" & tree.component.size * 8;
      tree.component.return_type_name := tree.component.type_name;
      tree.component.converter := "Item." & tree.component.name;
   elsif tree.component.type.to_lower = "string" then
      tree.component.type_name := "String (1 .. " & tree.component.size & ")";
      tree.component.return_type_name := "String";
      tree.component.converter := "Item." & tree.component.name;
   else
      io.put_line ("warning: unknown type: " & tree.component.type);
   end if;  
   tree^file_entry.layout.append (tree.component);
   tree^file_entry.entry.set (tree.component.name, tree.component);
end;

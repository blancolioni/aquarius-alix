before top_level do
   top.files := new Array;
   top.next_id := 1;
end;

after top_level do
   aqua.report_state;
end;

after package_declaration/package_name do
   top.package_name := child.image;
   top.package_file := top.package_name.replace(".", "-").to_lower;
end;

after primary_expression/named_reference do
   parent.is_constant := 0;
end;

after primary_expression/member_expression do
   parent.is_constant := 0;
   parent.reference :=
      (record_entry => parent^file_declaration.entry_table.get (member_expression/record_reference.image),
       component_name => member_expression/identifier.text);
end;

after primary_expression/numeric_literal
   or primary_expression/character_literal
   or primary_expression/string_literal
do
   parent.is_constant := 1;
end;

after expression/primary_expression do
   parent.is_constant := child.is_constant;
   parent.reference := child.reference;
end;

after expression do
   tree.value := tree.image;
   tree.reference := tree/primary_expression.reference;
end;

after file_declaration/file_name do
   parent.file_name := file_name.image;
   parent.entries := new Array;
   parent.entry_table := new Map;
   top.files.append ((name => child.image, entries => tree.entries, entry_table => tree.entry_table));
end;

after file_entry/file_entry_name do
   parent.entry := new Map;
   parent.layout := new Array;
   child.new_entry := (name => child.image, declaration => parent);
   parent^file_declaration.entries.append (child.new_entry);
   parent^file_declaration.entry_table.set
     (child.image, child.new_entry);
end;

after location/expression do
   location.value := expression.value;
   location.is_constant := expression.is_constant;
   location.reference := expression.reference;
   if not expression.is_constant then
      location.value := "File." & location.value;
   end if;
end;

after file_entry/location do
   parent.location := location.value;
   parent.reference := location.reference;
   if parent.reference then
      if parent.reference.record_entry.declaration.has_array then
         parent.has_array := 1;
         parent.indirect_array := 1;
         parent^file_declaration.need_ordered_maps := 1;
      end if;
   end if;
end;

after array_size/expression do
   parent.array_size := expression.value;
   parent.is_constant := expression.is_constant;
end;

after array_size do
   if tree.array_size then
      null;
   else
      tree.indefinite_array := 1;
      tree^file_declaration.need_vectors := 1;
      io.put_line ("indefinite array: " & tree^file_entry/file_entry_name.image);
   end if;
end;

after record_type/array_size do
   tree^file_declaration.need_vectors := 1;
   tree^file_entry.has_array := 1;
   parent.has_array := 1;
   parent.array_size := child.array_size;
   parent.indefinite_array := child.indefinite_array;
   parent.static_array := child.is_constant;
end;

before record_type do
   tree.size := 0;
end;

after file_entry/record_type do
   if child.has_array then
      parent.has_array := child.has_array;
      parent.array_size := child.array_size;
      parent.indefinite_array := child.indefinite_array;
      parent.static_array := child.static_array;
   end if;
   parent.size := child.size;
end;

before component_type do
   tree.component_size := 4;
end;

after component_type/type_count do
   tree.inline_array := type_count/numeric_literal.image;
end;

after named_type/identifier do
   parent.type := identifier.text;
   parent.component_size := 4;
end;

after named_type/numeric_literal do
   named_type.component_size := numeric_literal.text.to_integer;
end;

after component_type/named_type do
   parent.type := named_type.type;
   parent.component_size := named_type.component_size;
end;

after access_type/from_clause do
   parent.access_offset := from_clause/access_offset.image;
   parent.access_length := from_clause/access_length.image;
end;

after access_type/base_clause do
   parent.access_base := child/base_offset.image;
end;

after component_type/access_Type do
   parent.type := access_type/identifier.image;
   parent.access_type := 1;
   parent.access_offset := child.access_offset;
   parent.access_length := child.access_length;
   parent.access_base   := child.access_base;
end;

after record_component/component_name do
   parent.component_name := child.image;
end;

after record_component/component_type do
   parent.component_type := child.type;
   parent.component_access := child.access_type;
   if child.access_offset then
      parent.offset_and_length := (offset => child.access_offset, length => child.access_length);
   end if;
   parent.access_base := child.access_base;
   parent.component_size := child.component_size;
   parent.inline_array := child.inline_array;
end;

after record_component/array_size do
   parent.array_size := child.array_size;
end;

after record_component/required_value do
   parent.required_value := child.image;
end;

after record_component do
   tree.component :=
      (name   => tree.component_name,
       type   => tree.component_type,
       access => tree.component_access,
       offset => tree.offset_and_length,
       base   => tree.access_base,
       array_size => tree.array_size,
       size => tree.component_size,
       required_value => tree.required_value,
       variant_field => tree^record_type.current_variant_field,
       variant_value => tree^record_type.current_variant_value);

   
   if tree.component_name = "_" then
      tree.component.name := "Private_" & top.next_id;
      tree.component.private := 1;
      top.next_id := top.next_id + 1;
   elsif tree.component_name.slice (1, 1) = "_" then
      tree.component.name := "Private_" & top.next_id & tree.component_name;
      tree.component.private := 1;
      top.next_id := top.next_id + 1;
   end if;

   if tree.component.variant_field then
      if not tree^file_entry.variants then
         tree^file_entry.variants := new Map;
      end if;
      if not tree^file_entry.variants.get (tree.component.variant_field) then
         tree^file_entry.variants.set (tree.component.variant_field, new Map);
      end if;
      if not tree^file_entry.variants.get (tree.component.variant_field).get (tree.component.variant_value) then
         tree^file_entry.variants.get (tree.component.variant_field).set (tree.component.variant_value, new Array);
      end if;
      tree^file_entry.variants.get (tree.component.variant_field).get (tree.component.variant_value).append (tree.component);
   end if;
   
   if tree.component.offset then
      if tree.component.type.to_lower = "string" then
         tree.component.type_name := "access String";
         tree.component.return_type_name := "String";
         tree.component.converter := "Item." & tree.component.name & ".all";
      else
         tree.component.type_name := "Storage_Access";
         tree.component.return_type_name := "System.Storage_Elements.Storage_Array";
         tree.component.converter := "Item." & tree.component.name & ".all";
      end if;
   elsif tree.component_access then
      tree.component.type_name := "access String";
      tree.component.return_type_name := "String";
      tree.component.converter := "Item." & tree.component.name & ".all";
   elsif tree.component.type.to_lower = "word" then
      tree.component.type_name := "WL.Binary_IO.Word_" & tree.component.size * 8;
      tree.component.return_type_name := tree.component.type_name;
      tree.component.converter := "Item." & tree.component.name;
   elsif tree.component.type.to_lower = "integer" then
      tree.component.type_name := "WL.Binary_IO.Integer_" & tree.component.size * 8;
      tree.component.return_type_name := tree.component.type_name;
      tree.component.converter := "Item." & tree.component.name;
   elsif tree.component.type.to_lower = "string" then
      tree.component.type_name := "String (1 .. " & tree.component.size & ")";
      tree.component.return_type_name := "String";
      tree.component.converter := "Item." & tree.component.name;
   else
      io.put_line ("warning: unknown type: " & tree.component.type);
   end if;  

   if tree.inline_array then
      tree.component.inline_array_type_name := tree.component.name & "_Array";
      tree.component.inline_array_dec := "array (1 .. " & tree.inline_array & ") of " & tree.component.type_name;
      tree.component.element_type_name := tree.component.type_name;
      tree.component.type_name := tree.component.inline_array_type_name;
   end if;
   
   tree^file_entry.layout.append (tree.component);
   tree^file_entry.entry.set (tree.component.name, tree.component);
   tree^record_type.size := tree^record_type.size + tree.component.size;
end;

before variant_component/identifier do
   IO.Put_line ("variant: " & identifier.text);
   tree^record_type.current_variant_field := identifier.text;
end;

after variant_component do
   tree^record_type.current_variant_field := null;
end;

before variant do
   tree^record_type.current_variant_value := tree/numeric_literal.text;
end;

after variant do
   tree^record_type.current_variant_value := null;
end;

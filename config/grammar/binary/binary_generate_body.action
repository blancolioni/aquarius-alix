@!aquarius:actionscript
@before file_declaration do
@IO.set_output (top.package_file & "-" & tree.file_name.to_lower & ".adb");
package body [top.package_name].[tree.file_name] is

   pragma Style_Checks (Off);
   pragma Warnings (Off);
   
@  for file_entry in tree.entries loop
   procedure Read_[file_entry.name]
     (File : in out WL.Binary_IO.File_Type;
      Target : File_Type;
      [file_entry.name] : out [file_entry.name]_Type);
@  end loop;

@   for file_entry in tree.entries loop
@      if file_entry.declaration.has_array then
@      if file_entry.declaration.array_size then
   function [file_entry.name]_Count
     (File : File_Type)
     return Natural
   is
   begin
      return File.[file_entry.name]_Vector.Last_Index;
   end [file_entry.name]_Count;

   function Get_[file_entry.name]
     (File   : File_Type;
      Index  : Natural)
     return [file_entry.name]_Cursor
   is
   begin
      return [file_entry.name]_Cursor (File.[file_entry.name]_Vector.To_Cursor (Index + 1));
   end Get_[file_entry.name];
@      elsif file_entry.declaration.indirect_array then
   function Get_[file_entry.name]
     (File   : in out File_Type;
      Offset : WL.Binary_IO.Word_32)
     return [file_entry.name]_Cursor
   is
      use [file_entry.name]_Containers;
      Result : Cursor := File.[file_entry.name]_Map.Find (Offset);
   begin
      if not Has_Element (Result) then
         declare
            Item : [file_entry.name]_Type;
         begin               
            WL.Binary_IO.Set_Offset (File.Bin, Offset);
            Read_[file_entry.name] (File.Bin, File, Item);
            File.[file_entry.name]_Map.Insert (Offset, Item);
            Result := File.[file_entry.name]_Map.Find (Offset);
         end;
      end if;

      return [file_entry.name]_Cursor (Result);
   end Get_[file_entry.name];
@      else
   function Get_[file_entry.name]
     (File   : in out File_Type;
      Index  : Natural)
     return [file_entry.name]_Cursor
   is
      Vector_Index : constant Positive := Index + 1;
   begin
      if Vector_Index > File.[file_entry.name]_Vector.Last_Index then
         File.[file_entry.name]_Vector.Set_Length
            (Ada.Containers.Count_Type (Vector_Index));
      end if;

      if not File.[file_entry.name]_Vector.Element (Vector_Index).Internal_Record_Present then
         declare
            use WL.Binary_IO;
            Offset : constant Word_32 :=
              [file_entry.declaration.location] + Word_32 (Index) * [file_entry.declaration.size];
            Item : [file_entry.name]_Type;
         begin
            WL.Binary_IO.Set_Offset (File.Bin, Offset);
            Read_[file_entry.name] (File.Bin, File, Item);
            Item.Internal_Record_Present := True;
            File.[file_entry.name]_Vector (Vector_Index) := Item;
         end;
      end if;

      return [file_entry.name]_Cursor
         (File.[file_entry.name]_Vector.To_Cursor (Vector_Index));
   end Get_[file_entry.name];
@         end if;        
@      end if;

@      for component in file_entry.declaration.layout loop
@         if not component.private then
   function Get_[component.name] 
@         if file_entry.declaration.has_array then
     (Position : [file_entry.name]_Cursor) 
@            elsif component.inline_array_dec then
     (File  : File_Type;
      Index : Positive)
@         else
     (File : File_Type)
@         end if;
     return [component.return_type_name]
   is
@         if file_entry.declaration.has_array then
      use [file_entry.name]_Containers;
      Item : [file_entry.name]_Type renames Element (Cursor (Position));
@         elsif component.inline_array_dec then
      Item : [component.inline_array_type_name] renames File.[file_entry.name].[component.name];
@         else
      Item : [file_entry.name]_Type renames File.[file_entry.name];
@         end if;
   begin
@         if component.inline_array_dec then
      return Item (Index);
@         else
      return [component.converter];
@         end if;
   end Get_[component.name];

@         end if;   
@      end loop;
@   end loop;
   ----------
   -- Load --
   ----------
   
   procedure Load 
     (File : in out File_Type;
      Path : String)
   is
      use WL.Binary_IO;
   begin
      Open (File.Bin, In_File, Path);
@  for file_entry in tree.entries loop
@     if file_entry.declaration.location then
@        if file_entry.declaration.indirect_array then
@           null;
@        elsif file_entry.declaration.indefinite_array then
@           null;
@        else
      Set_Offset (File.Bin, [file_entry.declaration.location]);
@        end if;
@     end if;
@     if file_entry.declaration.indefinite_array then
      --  indefinite array: [file_entry.name]
@     elsif file_entry.declaration.indirect_array then
      --  indirect array: [file_entry.name]
@     elsif file_entry.declaration.array_size then
      declare
@        if file_entry.declaration.static_array then
         Count : constant Natural := [file_entry.declaration.array_size];
@        else
         Count : constant Natural := Natural (File.[file_entry.declaration.array_size]);
@        end if;
      begin
         for I in 1 .. Count loop
            declare
               [file_entry.name] : [file_entry.name]_Type;
            begin
               Read_[file_entry.name] (File.Bin, File, [file_entry.name]);
               File.[file_entry.name]_Vector.Append ([file_entry.name]);
            end;
         end loop;
      end;
@     else
      Read_[file_entry.name] (File.Bin, File, File.[file_entry.name]);
@     end if;
@  end loop;
@--      Close (Bin);
   end Load;
   
@  for file_entry in tree.entries loop
   procedure Read_[file_entry.name]
     (File : in out WL.Binary_IO.File_Type;
      Target : File_Type;
      [file_entry.name] : out [file_entry.name]_Type)
   is
      use WL.Binary_IO;
   begin
@      for component in file_entry.declaration.layout loop
@         if component.variant_field then
      if [file_entry.name].[component.variant_field] = [component.variant_value] then
@         end if;
@         if component.offset then
      declare
         use System.Storage_Elements;
@            if component.base then
         use type WL.Binary_IO.Word_32;
@            end if;
         --  length: [component.offset.length.image]
@               component.length_expression := 0;
@               for elem in component.offset.length loop
         --  elem: [elem]
@                    if component.length_expression then
@                       component.length_expression := component.length_expression & " * " & file_entry.name & "." & elem;
@                    else
@                       component.length_expression := file_entry.name & "." & elem;
@                    end if;
@                 end loop;
         --  expr: [component.length_expression]
@            if component.type.to_lower = "string" then
         Storage : Storage_Array (0 .. Storage_Offset ([component.length_expression]) - 1);
      begin
@            else
      begin
         [file_entry.name].[component.name] := new Storage_Array (0 .. Storage_Offset ([component.length_expression]) - 1);
@            end if;
@            if component.type.to_lower = "string" then
@            if component.base then
         WL.Binary_IO.Read (File, Storage, Target.[component.base] + [file_entry.name].[component.offset.offset]);
@            else
         WL.Binary_IO.Read (File, Storage, [file_entry.name].[component.offset.offset]);
@            end if;
         declare
            Count : Natural := 0;
         begin
            for X of Storage loop
               exit when X = 0;
               Count := Count + 1;
            end loop;
            [file_entry.name].[component.name] := new String (1 .. Count);
            Count := 0;
            for X of Storage loop
               exit when X = 0;
               Count := Count + 1;
               [file_entry.name].[component.name] (Count) := Character'Val (X);
            end loop;
         end;
@            else
@            if component.base then
         WL.Binary_IO.Read (File, [file_entry.name].[component.name].all, Target.[component.base] + [file_entry.name].[component.offset.offset]);
@            else
         WL.Binary_IO.Read (File, [file_entry.name].[component.name].all, [file_entry.name].[component.offset.offset]);
@            end if;
@            end if;
      end;
@         elsif component.access then
      declare
         Offset : WL.Binary_IO.Word_32;
      begin
         WL.Binary_IO.Read (File, Offset);
@            if component.base then
         Offset := Offset + Target.[component.base];
@            end if;
         [file_entry.name].[component.name] := new String'(WL.Binary_IO.Read (File, Offset));
      end;
@        elsif component.inline_array_dec then
      for I in [file_entry.name].[component.name]'Range loop
         WL.Binary_IO.Read (File, [file_entry.name].[component.name] (I));
      end loop;
@        else
      WL.Binary_IO.Read (File, [file_entry.name].[component.name]);
@        end if;
@         if component.variant_field then
      end if;
@         end if;
@      end loop;   
   end Read_[file_entry.name];

@  end loop;
@   for file_entry in tree.entries loop
@      if file_entry.declaration.array_size then
   procedure Scan
     (File : File_Type;
      Process : not null access
        procedure (Position : [file_entry.name]_Cursor))
   is
   begin
      for Position in File.[file_entry.name]_Vector.Iterate loop
         Process ([file_entry.name]_Cursor (Position));
      end loop;
   end Scan;
        
@      end if;
@   end loop;        
@end;
@after file_declaration do
end [top.package_name].[tree.file_name];
@IO.set_output (0);
@end;

@!aquarius:actionscript
@before file_declaration do
@IO.set_output (top.package_file & "-" & tree.file_name.to_lower & ".ads");
@if tree.need_vectors then
private with Ada.Containers.Vectors;
@end if;
with System.Storage_Elements;
with WL.Binary_IO;

package [top.package_name].[tree.file_name] is

   pragma Style_Checks (Off);
   pragma Warnings (Off);
   
   type File_Type is private;
   
   procedure Load 
     (File : in out File_Type;
      Path : String);
      
@   for file_entry in tree.entries loop
@      if file_entry.declaration.array_size then
   function [file_entry.name]_Count
     (File : File_Type)
     return Natural;
     
   type [file_entry.name]_Cursor is private;

@      end if;
@      for component in file_entry.declaration.layout loop
@         if not component.private then
   function Get_[component.name] 
@            if file_entry.declaration.array_size then   
     (Position : [file_entry.name]_Cursor) 
@            elsif component.inline_array_dec then
     (File  : File_Type;
      Index : Positive)
@            else
     (File : File_Type)
@            end if;
     return [component.return_type_name];
     
@         end if;
@      end loop;
@   end loop;
@   for file_entry in tree.entries loop
@      if file_entry.declaration.array_size then
   procedure Scan
     (File : File_Type;
      Process : not null access
        procedure (Position : [file_entry.name]_Cursor));
        
@      end if;
@   end loop;        
@end;
@after file_declaration do
private

   type Storage_Access is access System.Storage_Elements.Storage_Array;
   
@   for file_entry in tree.entries loop
@      for component in file_entry.declaration.layout loop
@         if component.inline_array_dec then
   type [component.inline_array_type_name] is [component.inline_array_dec];
   
@         end if;
@      end loop;
   type [file_entry.name]_Type is
      record
@      for component in file_entry.declaration.layout loop
         [component.name] : [component.type_name];
@      end loop;
      end record;

@   if file_entry.declaration.array_size then
   package [file_entry.name]_Vectors is
     new Ada.Containers.Vectors (Positive, [file_entry.name]_Type);

   type [file_entry.name]_Cursor is new [file_entry.name]_Vectors.Cursor;     
@   end if;
@   end loop;
   type File_Type is
      record
@   for file_entry in tree.entries loop
@      if file_entry.declaration.array_size then
         [file_entry.name]_Vector : [file_entry.name]_Vectors.Vector;
@      else
         [file_entry.name]        : [file_entry.name]_Type;
@      end if;
@   end loop;
      end record;
   
end [top.package_name].[tree.file_name];
@IO.set_output (0);
@end;

top_level = compilation_unit
case_sensitive = false

identifier         ::= !\l[\w]*
numeric_literal    ::= ![0-9]+!
string_literal     ::= standard ada_string_literal
delimiter          ::= !&()+,;|^.!
symbol             ::= ![:=></]+!
comment            ::= !--[.]*!

format sequence_of_statements indented_child
format actual_argument_list soft_new_line

format ';' no_space_before no_space_after new_line_after
format '.' no_space_before no_space_after
format '(' space_before no_space_after
format ')' no_space_before space_after
format ',' no_space_before space_after
format ''' no_space_before no_space_after
format ':=' space_before space_after soft_new_line

format 'is' new_line_after

compilation_unit ::= sequence_of_statements

sequence_of_statements ::= { statement ';' }

statement ::= for_loop_statement | case_statement | if_statement | assignment_statement
            | procedure_call_statement | declare_statement | null_statement | action_statement
            | new_statement
            
null_statement ::= 'null'

new_statement ::= 'new' object_reference

assignment_statement ::= object_reference ':=' expression

procedure_call_statement ::= object_reference

action_statement ::= action_header 'do' action_definition 'end'

action_header ::= action_time < action_context / 'or' >

action_time ::= 'before' | 'after'

action_context ::= < identifier / '/' >

action_definition ::= sequence_of_statements

declare_statement ::= 'declare' declaration

declaration ::= object_declaration

object_declaration ::= identifier [ ':' [ 'constant' ] qualified_identifier ] [ ':=' expression ]

if_statement ::= 'if' expression 'then' sequence_of_statements
                 { 'elsif' expression 'then' sequence_of_statements }
                 [ 'else' sequence_of_statements ]
                 'end' 'if'

case_statement ::= 'case' expression 'is' < case_option > 'end' 'case'

case_option ::= 'when' expression '=>' sequence_of_statements

for_loop_statement ::=
   for_all_loop
 | for_tree_loop
 | iterator_loop

for_all_loop ::=
   'for' 'all' loop_statement

for_tree_loop ::=
   'for' object_reference loop_statement
   
iterator_loop ::=
   'for' identifier 'of' object_reference loop_statement
   
loop_statement ::= 'loop' sequence_of_statements 'end' 'loop'

qualified_identifier ::= < identifier / '.' >

expression ::=
    relation { boolean_operator relation }

relation ::=
	simple_expression [ relational_operator simple_expression ]

simple_expression ::=
    [ unary_adding_operator ] term { binary_adding_operator term }

term ::= factor { multiplying_operator factor }

factor ::= [ unary_primary_operator ] primary

primary ::= numeric_literal | string_literal : string
          | object_reference
          | 'null' | parenthesised_expression
	      | if_expression
          | aggregate

parenthesised_expression ::= '(' expression ')'

aggregate ::= '(' aggregate_element_list ')'

aggregate_element_list ::= < aggregate_element / ',' >

aggregate_element ::= identifier '=>' expression

if_expression ::= 
  '(' 'if' expression 'then' expression { 'elsif' expression 'then' expression } 'else' expression ')'
  
boolean_operator ::=
	'and' | 'and' 'then' | 'or' | 'or' 'else' | 'xor'

relational_operator ::= '=' | '/=' | '<' | '<=' | '>' | '>='

binary_adding_operator ::= '+' | '-' | '&'

unary_adding_operator ::= '+' | '-'

unary_primary_operator ::= 'abs' | 'not'

multiplying_operator ::= '*' | '/' | 'mod' | 'rem'

object_reference ::= < name_qualifier / object_operator >
                   
name_qualifier ::= identifier [ actual_argument_list ]

object_operator ::= '.' | '/' | '^'

actual_argument_list ::= '(' < expression / ','> ')'
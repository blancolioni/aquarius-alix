top_level ::= compilation_unit
case_sensitive = false

identifier         ::= !\l[\w]*!
numeric_literal    ::= ![0-9]+!
string_literal     ::= standard ada_string_literal
delimiter          ::= delimiters "(),;"
symbol             ::= ![:=><&^\.\*/+-]+!

line_comment = "--"

format sequence_of_statements indented_child

format actual_argument_list soft_new_line

format ';' no_space_before
format '.' no_space_before no_space_after
format '(' space_before no_space_after soft_new_line_before
format ')' no_space_before space_after
format ',' no_space_before space_after
format ':=' space_before space_after soft_new_line
format '/' no_space_before no_space_after
format '^' no_space_before no_space_after

format 'is' new_line_after

format statement new_line_before

compilation_unit ::= sequence_of_top_level_declarations

sequence_of_top_level_declarations ::= { top_level_declaration [ ';' ] }

top_level_declaration ::= with_declaration | action_declaration | function_declaration

with_declaration ::= 'with' < identifier / ',' >

action_declaration ::= action_header 'do' action_definition 'end'

function_declaration ::= 'function' identifier [ '(' arguments ')' ] 'is'
                             list_of_local_declarations
                         'begin'
                             sequence_of_statements
                         'end' identifier

list_of_local_declarations ::= { local_declaration [ ';' ] }

local_declaration ::= local_variable_list [ ':=' expression ]

arguments ::= < identifier / ',' >

local_variable_list ::= < identifier / ',' >

sequence_of_statements ::= { statement [ ';' ] }

statement ::= for_loop_statement | case_statement | if_statement | assignment_statement
            | procedure_call_statement | declare_statement | null_statement | return_statement

null_statement ::= 'null'

return_statement ::= 'return' expression

assignment_statement ::= object_reference ':=' expression

procedure_call_statement ::= object_reference

action_header ::= action_time < action_context / 'or' >

action_time ::= 'before' | 'after'

action_context ::= < identifier / '/' >

action_definition ::= sequence_of_statements

declare_statement ::= 'declare' declaration

declaration ::= object_declaration

object_declaration ::= identifier [ ':' qualified_identifier ] [ ':=' expression ]

if_statement ::= 'if' expression 'then' sequence_of_statements
                 { 'elsif' expression 'then' sequence_of_statements }
                 [ 'else' sequence_of_statements ]
                 'end' 'if'

case_statement ::= 'case' expression 'is' < case_option > 'end' 'case'

case_option ::= 'when' expression '=>' sequence_of_statements

for_loop_statement ::= iterator_loop

iterator_loop ::=
   'for' identifier 'in' object_reference loop_statement

loop_statement ::= 'loop' sequence_of_statements 'end' 'loop'

qualified_identifier ::= < identifier / '.' >

expression ::=
    relation { boolean_operator relation }

relation ::=
        simple_expression [ relational_operator simple_expression ]

simple_expression ::=
    [ unary_adding_operator ] term { binary_adding_operator term }

term ::= factor { multiplying_operator factor }

factor ::= [ unary_primary_operator ] primary

primary ::= numeric_literal | string_literal : string
          | object_reference
          | 'null' | parenthesised_expression
          | if_expression
          | aggregate | array_aggregate
          | new_expression
          
parenthesised_expression ::= '(' expression ')'

new_expression ::= 'new' object_reference [ actual_argument_list ]

aggregate ::= '(' aggregate_element_list ')'

aggregate_element_list ::= < aggregate_element / ',' >

aggregate_element ::= identifier '=>' expression

array_aggregate ::= '[' expression_list ']'

expression_list ::= { expression / ',' }

if_expression ::=
  '(' 'if' expression 'then' expression { 'elsif' expression 'then' expression } 'else' expression ')'

boolean_operator ::=
        'and' | 'and' 'then' | 'or' | 'or' 'else' | 'xor'

relational_operator ::= '=' | '/=' | '<' | '<=' | '>' | '>='

binary_adding_operator ::= '+' | '-' | '&'

unary_adding_operator ::= '+' | '-'

unary_primary_operator ::= 'abs' | 'not'

multiplying_operator ::= '*' | '/' | 'mod' | 'rem'

object_reference ::= < name_qualifier / object_operator >

name_qualifier ::= identifier [ actual_argument_list ]

object_operator ::= '.' | '/' | '^' | '|'

actual_argument_list ::= '(' < expression / ','> ')'
